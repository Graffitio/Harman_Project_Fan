
Project_Fan_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  000004a2  00000536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  008001aa  008001aa  000005e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018e1  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d67  00000000  00000000  00002061  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b64  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  0000392c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000662  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066a  00000000  00000000  00004192  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ea       	ldi	r30, 0xA2	; 162
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 3a       	cpi	r26, 0xAA	; 170
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa ea       	ldi	r26, 0xAA	; 170
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 3c       	cpi	r26, 0xC9	; 201
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d7 d1       	rcall	.+942    	; 0x472 <main>
  c4:	ec c1       	rjmp	.+984    	; 0x49e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Button_init>:
#include <avr/io.h>
#include <util/delay.h>

// 버튼 초기화 함수 정의
void Button_init(Button *button, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
  c8:	fc 01       	movw	r30, r24
	button->ddr = ddr; // 버튼의 입출력 방향 레지스터 설정
  ca:	71 83       	std	Z+1, r23	; 0x01
  cc:	60 83       	st	Z, r22
	button->pin = pin; // 버튼의 상태를 읽을 포트 레지스터 설정
  ce:	53 83       	std	Z+3, r21	; 0x03
  d0:	42 83       	std	Z+2, r20	; 0x02
	button->btnPin = pinNum; // 버튼 핀 번호 설정
  d2:	24 83       	std	Z+4, r18	; 0x04
	button->prevState = RELEASED; // 초기화, 아무것도 안 누른 상태
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	85 83       	std	Z+5, r24	; 0x05
	*button->ddr &= ~(1 << button->btnPin); // 버튼 핀을 입력으로 설정, ->가 *보다 빠름
  d8:	fb 01       	movw	r30, r22
  da:	30 81       	ld	r19, Z
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Button_init+0x1e>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	2a 95       	dec	r18
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <Button_init+0x1a>
  ea:	80 95       	com	r24
  ec:	83 23       	and	r24, r19
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <BUTTON_getState>:
}

// 버튼 상태 반환 함수 정의
uint8_t BUTTON_getState(Button *button)
{
  f2:	fc 01       	movw	r30, r24
	uint8_t curState = *button->pin & (1<<button->btnPin); // 버튼 상태를 읽어옴
  f4:	a2 81       	ldd	r26, Z+2	; 0x02
  f6:	b3 81       	ldd	r27, Z+3	; 0x03
  f8:	8c 91       	ld	r24, X
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	04 80       	ldd	r0, Z+4	; 0x04
 100:	02 c0       	rjmp	.+4      	; 0x106 <BUTTON_getState+0x14>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <BUTTON_getState+0x10>
 10a:	28 23       	and	r18, r24
	
	if ((curState == PUSHED) && (button->prevState == RELEASED)) // 버튼을 안 누른 상태에서 누르면,
 10c:	59 f4       	brne	.+22     	; 0x124 <BUTTON_getState+0x32>
 10e:	85 81       	ldd	r24, Z+5	; 0x05
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	41 f4       	brne	.+16     	; 0x124 <BUTTON_getState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	a3 ed       	ldi	r26, 0xD3	; 211
 116:	b0 e3       	ldi	r27, 0x30	; 48
 118:	11 97       	sbiw	r26, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <BUTTON_getState+0x26>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <BUTTON_getState+0x2c>
 11e:	00 00       	nop
	{
		_delay_ms(50); // 디바운스 코드
		button->prevState = PUSHED; // 버튼을 누른 상태로 변환
 120:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSH; // 버튼이 눌려 있음을 반환
 122:	08 95       	ret
	}
	else if((curState != PUSHED) && (button->prevState == PUSHED)) // 버튼을 누른 상태에서 떼면,
 124:	22 23       	and	r18, r18
 126:	69 f0       	breq	.+26     	; 0x142 <BUTTON_getState+0x50>
 128:	85 81       	ldd	r24, Z+5	; 0x05
 12a:	81 11       	cpse	r24, r1
 12c:	0c c0       	rjmp	.+24     	; 0x146 <BUTTON_getState+0x54>
 12e:	83 ed       	ldi	r24, 0xD3	; 211
 130:	90 e3       	ldi	r25, 0x30	; 48
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <BUTTON_getState+0x40>
 136:	00 c0       	rjmp	.+0      	; 0x138 <BUTTON_getState+0x46>
 138:	00 00       	nop
	{
		_delay_ms(50); // 디바운스 코드
		button->prevState = RELEASED; // 버튼을 땐 상태로 변환
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED; // 버튼이 떨어진 것을 반환
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	08 95       	ret
	}
	return NO_ACT; // 아무 것도 안 했을 때
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
 146:	80 e0       	ldi	r24, 0x00	; 0
}
 148:	08 95       	ret

0000014a <Fan_Init>:
#include "Fan.h"

void Fan_Init()
{
	// I2C LCD 초기화
	LCD_Init();
 14a:	69 d1       	rcall	.+722    	; 0x41e <LCD_Init>
	
	// Button Setting
	LED_DDR = 0xff; // PORTA 출력 설정
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	8a bb       	out	0x1a, r24	; 26
	
	Button_init(&btnStop, &BUTTON_DDR, &BUTTON_PIN, BUTTON_STOP); // PORTC 0번 핀 입력 활성화
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	43 e3       	ldi	r20, 0x33	; 51
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	64 e3       	ldi	r22, 0x34	; 52
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	8c eb       	ldi	r24, 0xBC	; 188
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	b4 df       	rcall	.-152    	; 0xc8 <Button_init>
	Button_init(&btn_1stage, &BUTTON_DDR, &BUTTON_PIN, BUTTON_1stage); // PORTC 1번 핀 입력 활성화
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	43 e3       	ldi	r20, 0x33	; 51
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	64 e3       	ldi	r22, 0x34	; 52
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	82 ec       	ldi	r24, 0xC2	; 194
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	ac df       	rcall	.-168    	; 0xc8 <Button_init>
	Button_init(&btn_2stage, &BUTTON_DDR, &BUTTON_PIN, BUTTON_2stage); // PORTC 2번 핀 입력 활성화
 170:	22 e0       	ldi	r18, 0x02	; 2
 172:	43 e3       	ldi	r20, 0x33	; 51
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	64 e3       	ldi	r22, 0x34	; 52
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	8a ea       	ldi	r24, 0xAA	; 170
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	a4 df       	rcall	.-184    	; 0xc8 <Button_init>
	Button_init(&btn_3stage, &BUTTON_DDR, &BUTTON_PIN, BUTTON_3stage); // PORTC 3번 핀 입력 활성화
 180:	23 e0       	ldi	r18, 0x03	; 3
 182:	43 e3       	ldi	r20, 0x33	; 51
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	64 e3       	ldi	r22, 0x34	; 52
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	86 eb       	ldi	r24, 0xB6	; 182
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	9c df       	rcall	.-200    	; 0xc8 <Button_init>
	Button_init(&btn_spin, &BUTTON_DDR, &BUTTON_PIN, BUTTON_spin); // PORTC 4번 핀 입력 활성화
 190:	24 e0       	ldi	r18, 0x04	; 4
 192:	43 e3       	ldi	r20, 0x33	; 51
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	64 e3       	ldi	r22, 0x34	; 52
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	80 eb       	ldi	r24, 0xB0	; 176
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	94 df       	rcall	.-216    	; 0xc8 <Button_init>
	
	// PWM Setting
	DDRF |= (1<<PINF4) | (1<<PINF5); // PINF4, 5 출력 설정
 1a0:	e1 e6       	ldi	r30, 0x61	; 97
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 63       	ori	r24, 0x30	; 48
 1a8:	80 83       	st	Z, r24
	TCCR0 |= (1<<CS02) | (1<<CS01) | (0<<CS00); // 256분주
 1aa:	83 b7       	in	r24, 0x33	; 51
 1ac:	86 60       	ori	r24, 0x06	; 6
 1ae:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01) | (1<<WGM00); // Fast PWM mode
 1b0:	83 b7       	in	r24, 0x33	; 51
 1b2:	88 64       	ori	r24, 0x48	; 72
 1b4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01) | (0<<COM00); // 비반전 모드
 1b6:	83 b7       	in	r24, 0x33	; 51
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1<<DDRB4); // MOTOR 제어
 1bc:	87 b3       	in	r24, 0x17	; 23
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	87 bb       	out	0x17, r24	; 23
 1c2:	08 95       	ret

000001c4 <Fan_Start_signal>:
}

void Fan_Start_signal()
{
	// Fan Start Sign
	LCD_WriteStringXY(0,0," Hello Modesty! ");
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	51 e0       	ldi	r21, 0x01	; 1
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	1f d1       	rcall	.+574    	; 0x40c <LCD_WriteStringXY>
	LCD_WriteStringXY(1,0,"Please Press Btn");
 1ce:	41 e1       	ldi	r20, 0x11	; 17
 1d0:	51 e0       	ldi	r21, 0x01	; 1
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	1a c1       	rjmp	.+564    	; 0x40c <LCD_WriteStringXY>
 1d8:	08 95       	ret

000001da <Fan_Stage>:
}

void Fan_Stage()
{
	if (BUTTON_getState(&btnStop) == ACT_RELEASED)
 1da:	8c eb       	ldi	r24, 0xBC	; 188
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	89 df       	rcall	.-238    	; 0xf2 <BUTTON_getState>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	d1 f4       	brne	.+52     	; 0x218 <Fan_Stage+0x3e>
	{
		LED_PORT = 0x00;
 1e4:	1b ba       	out	0x1b, r1	; 27
		PORTF |= (1<<PINF4) | (1<<PINF5); // MOtor Break
 1e6:	e2 e6       	ldi	r30, 0x62	; 98
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 63       	ori	r24, 0x30	; 48
 1ee:	80 83       	st	Z, r24
		LCD_WriteStringXY(0,0,"   Stop mode    ");
 1f0:	42 e2       	ldi	r20, 0x22	; 34
 1f2:	51 e0       	ldi	r21, 0x01	; 1
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	09 d1       	rcall	.+530    	; 0x40c <LCD_WriteStringXY>
		LCD_WriteStringXY(1,0,"  Power :   0%  ");
 1fa:	43 e3       	ldi	r20, 0x33	; 51
 1fc:	51 e0       	ldi	r21, 0x01	; 1
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	04 d1       	rcall	.+520    	; 0x40c <LCD_WriteStringXY>
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	8b e7       	ldi	r24, 0x7B	; 123
 208:	92 e9       	ldi	r25, 0x92	; 146
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <Fan_Stage+0x30>
 212:	00 c0       	rjmp	.+0      	; 0x214 <Fan_Stage+0x3a>
		_delay_ms(3000);
		Fan_Start_signal();		
 214:	00 00       	nop
	}
	if(BUTTON_getState(&btn_1stage) == ACT_RELEASED)
 216:	d6 df       	rcall	.-84     	; 0x1c4 <Fan_Start_signal>
 218:	82 ec       	ldi	r24, 0xC2	; 194
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	6a df       	rcall	.-300    	; 0xf2 <BUTTON_getState>
 21e:	82 30       	cpi	r24, 0x02	; 2
	{
		LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 220:	e9 f4       	brne	.+58     	; 0x25c <Fan_Stage+0x82>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	c0 d0       	rcall	.+384    	; 0x3a6 <LCD_WriteCommand>
		// PORTF |= (1<<PINF4) | (1<<PINF5); // Pulse가 중첩되어 더 커지는 것을 방지하기 위한 MOtor Break
		// DDRB &= ~(1<<PINB4); // Pulse가 중첩되어 더 커지는 것을 방지하기 위한 MOtor Break
		LED_PORT = 0x00;
 226:	1b ba       	out	0x1b, r1	; 27
		LED_PORT |= (1<<PINA0);
 228:	8b b3       	in	r24, 0x1b	; 27
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	8b bb       	out	0x1b, r24	; 27
		DDRB |= (1<<PINB4);
 22e:	87 b3       	in	r24, 0x17	; 23
 230:	80 61       	ori	r24, 0x10	; 16
 232:	87 bb       	out	0x17, r24	; 23
		OCR0 = 64; // 25%
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	81 bf       	out	0x31, r24	; 49
		PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 238:	e2 e6       	ldi	r30, 0x62	; 98
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	8f 7d       	andi	r24, 0xDF	; 223
 240:	80 83       	st	Z, r24
		PORTF |= (1<<PINF4);
 242:	80 81       	ld	r24, Z
 244:	80 61       	ori	r24, 0x10	; 16
		LCD_WriteStringXY(0,0,"   1st Stage    ");
 246:	80 83       	st	Z, r24
 248:	44 e4       	ldi	r20, 0x44	; 68
 24a:	51 e0       	ldi	r21, 0x01	; 1
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
		LCD_WriteStringXY(1,0,"  Power :  25%  ");
 250:	dd d0       	rcall	.+442    	; 0x40c <LCD_WriteStringXY>
 252:	45 e5       	ldi	r20, 0x55	; 85
 254:	51 e0       	ldi	r21, 0x01	; 1
 256:	60 e0       	ldi	r22, 0x00	; 0

	}
	if(BUTTON_getState(&btn_2stage) == ACT_RELEASED)
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	d8 d0       	rcall	.+432    	; 0x40c <LCD_WriteStringXY>
 25c:	8a ea       	ldi	r24, 0xAA	; 170
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	48 df       	rcall	.-368    	; 0xf2 <BUTTON_getState>
 262:	82 30       	cpi	r24, 0x02	; 2
	{
		LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 264:	f9 f4       	brne	.+62     	; 0x2a4 <Fan_Stage+0xca>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	9e d0       	rcall	.+316    	; 0x3a6 <LCD_WriteCommand>
		// DDRB &= ~(1<<PINB4); // Pulse가 중첩되어 더 커지는 것을 방지하기 위한 MOtor Break
		LED_PORT = 0x00;
 26a:	1b ba       	out	0x1b, r1	; 27
		LED_PORT |= (1<<PINA0) | (1<<PINA1);
 26c:	8b b3       	in	r24, 0x1b	; 27
 26e:	83 60       	ori	r24, 0x03	; 3
 270:	8b bb       	out	0x1b, r24	; 27
		DDRB |= (1<<PINB4);
 272:	87 b3       	in	r24, 0x17	; 23
 274:	80 61       	ori	r24, 0x10	; 16
 276:	87 bb       	out	0x17, r24	; 23
		OCR0 = 128; // 50%
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	81 bf       	out	0x31, r24	; 49
		PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 27c:	e2 e6       	ldi	r30, 0x62	; 98
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	8f 7d       	andi	r24, 0xDF	; 223
		PORTF |= (1<<PINF4);
 284:	80 83       	st	Z, r24
 286:	80 81       	ld	r24, Z
		LCD_WriteStringXY(0,0,"   2nd Stage    ");
 288:	80 61       	ori	r24, 0x10	; 16
 28a:	80 83       	st	Z, r24
 28c:	46 e6       	ldi	r20, 0x66	; 102
 28e:	51 e0       	ldi	r21, 0x01	; 1
 290:	60 e0       	ldi	r22, 0x00	; 0
		LCD_WriteStringXY(1,0,"  Power :  50%  ");
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	bb d0       	rcall	.+374    	; 0x40c <LCD_WriteStringXY>
 296:	47 e7       	ldi	r20, 0x77	; 119
 298:	51 e0       	ldi	r21, 0x01	; 1
 29a:	60 e0       	ldi	r22, 0x00	; 0
		TWDR = 0x00;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	b6 d0       	rcall	.+364    	; 0x40c <LCD_WriteStringXY>
	}
	if(BUTTON_getState(&btn_3stage) == ACT_RELEASED)
 2a0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2a4:	86 eb       	ldi	r24, 0xB6	; 182
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	24 df       	rcall	.-440    	; 0xf2 <BUTTON_getState>
 2aa:	82 30       	cpi	r24, 0x02	; 2
	{
		LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 2ac:	e9 f4       	brne	.+58     	; 0x2e8 <Fan_Stage+0x10e>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	7a d0       	rcall	.+244    	; 0x3a6 <LCD_WriteCommand>
		// PORTF |= (1<<PINF4) | (1<<PINF5); // Pulse가 중첩되어 더 커지는 것을 방지하기 위한 MOtor Break
		// DDRB &= ~(1<<PINB4); // Pulse가 중첩되어 더 커지는 것을 방지하기 위한 MOtor Break
		LED_PORT = 0x00;
 2b2:	1b ba       	out	0x1b, r1	; 27
		LED_PORT |= (1<<PINA0) | (1<<PINA1) | (1<<PINA2);
 2b4:	8b b3       	in	r24, 0x1b	; 27
 2b6:	87 60       	ori	r24, 0x07	; 7
 2b8:	8b bb       	out	0x1b, r24	; 27
		DDRB |= (1<<PINB4);
 2ba:	87 b3       	in	r24, 0x17	; 23
 2bc:	80 61       	ori	r24, 0x10	; 16
 2be:	87 bb       	out	0x17, r24	; 23
		OCR0 = 255; // 100%
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
		PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 2c2:	81 bf       	out	0x31, r24	; 49
 2c4:	e2 e6       	ldi	r30, 0x62	; 98
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
		PORTF |= (1<<PINF4);
 2ca:	8f 7d       	andi	r24, 0xDF	; 223
 2cc:	80 83       	st	Z, r24
 2ce:	80 81       	ld	r24, Z
		LCD_WriteStringXY(0,0,"   3rd Stage    ");
 2d0:	80 61       	ori	r24, 0x10	; 16
 2d2:	80 83       	st	Z, r24
 2d4:	48 e8       	ldi	r20, 0x88	; 136
 2d6:	51 e0       	ldi	r21, 0x01	; 1
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	80 e0       	ldi	r24, 0x00	; 0
		LCD_WriteStringXY(1,0,"  Power : 100%  ");
 2dc:	97 d0       	rcall	.+302    	; 0x40c <LCD_WriteStringXY>
 2de:	49 e9       	ldi	r20, 0x99	; 153
 2e0:	51 e0       	ldi	r21, 0x01	; 1
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	92 c0       	rjmp	.+292    	; 0x40c <LCD_WriteStringXY>
 2e8:	08 95       	ret

000002ea <I2C_Init>:
#include "I2C.h"


void I2C_Init()
{
	I2C_DDR |= (1<<I2C_SCL) | (1<<I2C_SDA); // 출력 설정
 2ea:	81 b3       	in	r24, 0x11	; 17
 2ec:	83 60       	ori	r24, 0x03	; 3
 2ee:	81 bb       	out	0x11, r24	; 17
	TWBR = 72; // 100KHz
 2f0:	88 e4       	ldi	r24, 0x48	; 72
 2f2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 2f6:	08 95       	ret

000002f8 <I2C_Start>:
	// TWBR = 12; // 400KHz
}

void I2C_Start()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // 1을 보내는 것은, S/W적으로 플래그를 Clear해주는 것이다.
 2f8:	84 ea       	ldi	r24, 0xA4	; 164
 2fa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	                                            // 1 Set하여 인터럽트 발생시키는 것이 아님.
	while(!(TWCR & (1<<TWINT))); // 하드웨어적으로 TWINT 시점을 결정
 2fe:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 302:	88 23       	and	r24, r24
 304:	e4 f7       	brge	.-8      	; 0x2fe <I2C_Start+0x6>
	                             // 기다렸다가 조건이 만족되면 while문 수행
}
 306:	08 95       	ret

00000308 <I2C_Stop>:

void I2C_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // Stop 비트 설정
 308:	84 e9       	ldi	r24, 0x94	; 148
 30a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 30e:	08 95       	ret

00000310 <I2C_TxData>:
}

void I2C_TxData(uint8_t data) // data 1바이트 전송
{
	TWDR = data;
 310:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
 314:	84 e8       	ldi	r24, 0x84	; 132
 316:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT))); // 전송 완료 대기
 31a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 31e:	88 23       	and	r24, r24
 320:	e4 f7       	brge	.-8      	; 0x31a <I2C_TxData+0xa>
}
 322:	08 95       	ret

00000324 <I2C_TxByte>:

void I2C_TxByte(uint8_t devAddrRW, uint8_t data)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	d8 2f       	mov	r29, r24
 32a:	c6 2f       	mov	r28, r22
	I2C_Start();
 32c:	e5 df       	rcall	.-54     	; 0x2f8 <I2C_Start>
	I2C_TxData(devAddrRW); // 읽을 것이냐 쓸 것이냐
 32e:	8d 2f       	mov	r24, r29
 330:	ef df       	rcall	.-34     	; 0x310 <I2C_TxData>
	I2C_TxData(data); // 입/출력할 데이터 보냄
 332:	8c 2f       	mov	r24, r28
 334:	ed df       	rcall	.-38     	; 0x310 <I2C_TxData>
	I2C_Stop();
 336:	e8 df       	rcall	.-48     	; 0x308 <I2C_Stop>
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <LCD_EnablePin>:
 33e:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <I2C_LCD_Data>
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}

void LCD_EnablePin()
{
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 342:	6b 7f       	andi	r22, 0xFB	; 251
 344:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 348:	8e e4       	ldi	r24, 0x4E	; 78
 34a:	ec df       	rcall	.-40     	; 0x324 <I2C_TxByte>
	
	I2C_LCD_Data |= (1<<LCD_E); // High 설정
 34c:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <I2C_LCD_Data>
 350:	64 60       	ori	r22, 0x04	; 4
 352:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 356:	8e e4       	ldi	r24, 0x4E	; 78
 358:	e5 df       	rcall	.-54     	; 0x324 <I2C_TxByte>
	
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 35a:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <I2C_LCD_Data>
 35e:	6b 7f       	andi	r22, 0xFB	; 251
 360:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 364:	8e e4       	ldi	r24, 0x4E	; 78
 366:	de df       	rcall	.-68     	; 0x324 <I2C_TxByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	98 e1       	ldi	r25, 0x18	; 24
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCD_EnablePin+0x2e>
 370:	00 c0       	rjmp	.+0      	; 0x372 <LCD_EnablePin+0x34>
 372:	00 00       	nop
 374:	08 95       	ret

00000376 <LCD_Data4bit>:
#include "I2C_LCD.h"

uint8_t I2C_LCD_Data;

void LCD_Data4bit(uint8_t data)
{
 376:	cf 93       	push	r28
 378:	c8 2f       	mov	r28, r24
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | (data & 0xf0); // 상위 4bit 출력
 37a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <I2C_LCD_Data>
 37e:	8f 70       	andi	r24, 0x0F	; 15
 380:	9c 2f       	mov	r25, r28
 382:	90 7f       	andi	r25, 0xF0	; 240
 384:	89 2b       	or	r24, r25
 386:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <I2C_LCD_Data>
	// 이전 상위 비트는 다 날라감 | data의 상위 비트는 살림 
	LCD_EnablePin();
 38a:	d9 df       	rcall	.-78     	; 0x33e <LCD_EnablePin>
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | ((data & 0x0f)<<4); // 하위 4bit
 38c:	20 e1       	ldi	r18, 0x10	; 16
 38e:	c2 9f       	mul	r28, r18
 390:	c0 01       	movw	r24, r0
 392:	11 24       	eor	r1, r1
 394:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <I2C_LCD_Data>
 398:	9f 70       	andi	r25, 0x0F	; 15
 39a:	89 2b       	or	r24, r25
 39c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <I2C_LCD_Data>
	LCD_EnablePin();
 3a0:	ce df       	rcall	.-100    	; 0x33e <LCD_EnablePin>
	// 상위 4bit 받고 -> Enable해서 출력하고 -> 하위 4bit 받고 상위로 시프트하고 -> Enabla해서 출력하고
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <LCD_WriteCommand>:
	_delay_us(1600);
}

void LCD_WriteCommand(uint8_t commandData)
{
	I2C_LCD_Data &= ~(1<<LCD_RS); // Command일 때는 control register(TWCR)을 쓰고
 3a6:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <I2C_LCD_Data>
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 3aa:	9c 7f       	andi	r25, 0xFC	; 252
 3ac:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <I2C_LCD_Data>
	LCD_Data4bit(commandData);
 3b0:	e2 cf       	rjmp	.-60     	; 0x376 <LCD_Data4bit>
 3b2:	08 95       	ret

000003b4 <LCD_WriteData>:
}

void LCD_WriteData(uint8_t charData)
{
	I2C_LCD_Data |= (1<<LCD_RS); // Data받을 때는 Data Register(TWDR) 쓰고
 3b4:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <I2C_LCD_Data>
 3b8:	91 60       	ori	r25, 0x01	; 1
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 3ba:	9d 7f       	andi	r25, 0xFD	; 253
 3bc:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <I2C_LCD_Data>
	LCD_Data4bit(charData);
 3c0:	da cf       	rjmp	.-76     	; 0x376 <LCD_Data4bit>
 3c2:	08 95       	ret

000003c4 <LCD_BackLight>:
}


void LCD_BackLight()
{
	I2C_LCD_Data |= (1<<LCD_BACKLIGHT);
 3c4:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <I2C_LCD_Data>
 3c8:	68 60       	ori	r22, 0x08	; 8
 3ca:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 3ce:	8e e4       	ldi	r24, 0x4E	; 78
 3d0:	a9 cf       	rjmp	.-174    	; 0x324 <I2C_TxByte>
 3d2:	08 95       	ret

000003d4 <LCD_gotoXY>:
}

void LCD_gotoXY(uint8_t row, uint8_t col) // LCD 화면의 커서를 지정된 행(row)과 열(col) 위치로 이동시키는 함수
{
	col %= 16; // 0~15 사이의 값 지정 가능
 3d4:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2; // 0~1 사이의 값 지정 가능
 3d6:	81 70       	andi	r24, 0x01	; 1
	uint8_t address = (0x40 * row) + col; // 주어진 row와 col 값을 이용하여 LCD 화면의 주소(address, 커서 위치)룰 계산한다.
 3d8:	90 e4       	ldi	r25, 0x40	; 64
 3da:	89 9f       	mul	r24, r25
 3dc:	60 0d       	add	r22, r0
 3de:	11 24       	eor	r1, r1
 3e0:	86 2f       	mov	r24, r22
	// 두 번째 행(row 1)의 주소 범위는 0x40 ~ 0x4f(64~79)
	// 예시 : row 1, col 3 -> address = 0x43
	uint8_t command = 0x80 + address; // 계산된 주소를 이용하여 이동시키는 명령어 command 생성
	// 0x80을 사용하는 이유는 특정 주소값이 아닌, 첫 번째 행의 시작을 나타내는 상징적인 값으로 사용된다,
	// 이렇게 함으로써 코드의 가독성을 높이고, 행과 열 값을 쉽게 결합하여 원하는 주소 값을 계산할 수 있다.
	LCD_WriteCommand(command);
 3e2:	80 58       	subi	r24, 0x80	; 128
 3e4:	e0 cf       	rjmp	.-64     	; 0x3a6 <LCD_WriteCommand>
 3e6:	08 95       	ret

000003e8 <LCD_WriteString>:
}

void LCD_WriteString(char *string)
{
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	8c 01       	movw	r16, r24
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 3f0:	c0 e0       	ldi	r28, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);
 3f4:	df df       	rcall	.-66     	; 0x3b4 <LCD_WriteData>
	LCD_WriteCommand(command);
}

void LCD_WriteString(char *string)
{
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 3f6:	cf 5f       	subi	r28, 0xFF	; 255
 3f8:	f8 01       	movw	r30, r16
 3fa:	ec 0f       	add	r30, r28
 3fc:	f1 1d       	adc	r31, r1
 3fe:	80 81       	ld	r24, Z
 400:	81 11       	cpse	r24, r1
 402:	f8 cf       	rjmp	.-16     	; 0x3f4 <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);
	}
}
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	08 95       	ret

0000040c <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char *string)
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	ea 01       	movw	r28, r20
	LCD_gotoXY(row,col); // 행과 열의 위치를 받음. -> 어디서부터 쓸 것인지를 좌표를 받음
 412:	e0 df       	rcall	.-64     	; 0x3d4 <LCD_gotoXY>
	LCD_WriteString(string); // 문자열 입력을 받음
 414:	ce 01       	movw	r24, r28
 416:	e8 df       	rcall	.-48     	; 0x3e8 <LCD_WriteString>
}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <LCD_Init>:

void LCD_Init()
{
	I2C_Init();
 41e:	65 df       	rcall	.-310    	; 0x2ea <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 420:	2f ef       	ldi	r18, 0xFF	; 255
 422:	89 ef       	ldi	r24, 0xF9	; 249
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	21 50       	subi	r18, 0x01	; 1
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	90 40       	sbci	r25, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <LCD_Init+0x8>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <LCD_Init+0x12>
 430:	00 00       	nop
	
	_delay_ms(20);
	LCD_WriteCommand(0x03);
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	b8 df       	rcall	.-144    	; 0x3a6 <LCD_WriteCommand>
 436:	8f e3       	ldi	r24, 0x3F	; 63
 438:	9c e9       	ldi	r25, 0x9C	; 156
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <LCD_Init+0x1c>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <LCD_Init+0x22>
	_delay_ms(10);
	LCD_WriteCommand(0x03);
 440:	00 00       	nop
 442:	83 e0       	ldi	r24, 0x03	; 3
 444:	b0 df       	rcall	.-160    	; 0x3a6 <LCD_WriteCommand>
 446:	8f e9       	ldi	r24, 0x9F	; 159
 448:	9f e0       	ldi	r25, 0x0F	; 15
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <LCD_Init+0x2c>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <LCD_Init+0x32>
	_delay_ms(1);
	LCD_WriteCommand(0x03);
 450:	00 00       	nop
 452:	83 e0       	ldi	r24, 0x03	; 3
	
	LCD_WriteCommand(0x02);
 454:	a8 df       	rcall	.-176    	; 0x3a6 <LCD_WriteCommand>
 456:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 458:	a6 df       	rcall	.-180    	; 0x3a6 <LCD_WriteCommand>
 45a:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 45c:	a4 df       	rcall	.-184    	; 0x3a6 <LCD_WriteCommand>
 45e:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 460:	a2 df       	rcall	.-188    	; 0x3a6 <LCD_WriteCommand>
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	a0 df       	rcall	.-192    	; 0x3a6 <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 466:	86 e0       	ldi	r24, 0x06	; 6
 468:	9e df       	rcall	.-196    	; 0x3a6 <LCD_WriteCommand>
 46a:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 46c:	9c df       	rcall	.-200    	; 0x3a6 <LCD_WriteCommand>
 46e:	aa cf       	rjmp	.-172    	; 0x3c4 <LCD_BackLight>
 470:	08 95       	ret

00000472 <main>:
#include "Fan.h"


int main(void)
{
	Fan_Init();
 472:	6b de       	rcall	.-810    	; 0x14a <Fan_Init>
	Fan_Start_signal();
 474:	a7 de       	rcall	.-690    	; 0x1c4 <Fan_Start_signal>
 476:	8f b5       	in	r24, 0x2f	; 47
	
	// Head Spin
	TCCR1A |= (1<<WGM11) | (0<<WGM10); // Fast PWM(mode 14) 세팅
 478:	82 60       	ori	r24, 0x02	; 2
 47a:	8f bd       	out	0x2f, r24	; 47
 47c:	8e b5       	in	r24, 0x2e	; 46
	TCCR1B |= (1<<WGM13) | (1<<WGM12);
 47e:	88 61       	ori	r24, 0x18	; 24
 480:	8e bd       	out	0x2e, r24	; 46
 482:	8f b5       	in	r24, 0x2f	; 47
	TCCR1A |= (1<<COM1A1) | (0<<COM1A0);
 484:	80 68       	ori	r24, 0x80	; 128
 486:	8f bd       	out	0x2f, r24	; 47
 488:	8e b5       	in	r24, 0x2e	; 46
	TCCR1B |= (0<<CS12) | (1<<CS11) | (1<<CS10);
 48a:	83 60       	ori	r24, 0x03	; 3
 48c:	8e bd       	out	0x2e, r24	; 46
 48e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCCR1C = 0x00; // default가 0이라 안 써줘도 됨
 492:	87 e8       	ldi	r24, 0x87	; 135
		
	ICR1 = 4999;
 494:	93 e1       	ldi	r25, 0x13	; 19
 496:	97 bd       	out	0x27, r25	; 39
 498:	86 bd       	out	0x26, r24	; 38

		
	while (1)
	{
		Fan_Stage();
 49a:	9f de       	rcall	.-706    	; 0x1da <Fan_Stage>
 49c:	fe cf       	rjmp	.-4      	; 0x49a <main+0x28>

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
