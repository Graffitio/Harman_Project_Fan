
Project_Fan_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00000c2e  00000cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  008001aa  008001aa  00000d6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db3  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da8  00000000  00000000  00002cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e76  00000000  00000000  00003a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00004900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b9  00000000  00000000  00004b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e5  00000000  00000000  00005209  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000058ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 3a       	cpi	r26, 0xAA	; 170
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa ea       	ldi	r26, 0xAA	; 170
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 3c       	cpi	r26, 0xCD	; 205
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c4 d3       	rcall	.+1928   	; 0x84c <main>
  c4:	b2 c5       	rjmp	.+2916   	; 0xc2a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Button_init>:
#include <avr/io.h>
#include <util/delay.h>

// 버튼 초기화 함수 정의
void Button_init(Button *button, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
  c8:	fc 01       	movw	r30, r24
	button->ddr = ddr; // 버튼의 입출력 방향 레지스터 설정
  ca:	71 83       	std	Z+1, r23	; 0x01
  cc:	60 83       	st	Z, r22
	button->pin = pin; // 버튼의 상태를 읽을 포트 레지스터 설정
  ce:	53 83       	std	Z+3, r21	; 0x03
  d0:	42 83       	std	Z+2, r20	; 0x02
	button->btnPin = pinNum; // 버튼 핀 번호 설정
  d2:	24 83       	std	Z+4, r18	; 0x04
	button->prevState = RELEASED; // 초기화, 아무것도 안 누른 상태
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	85 83       	std	Z+5, r24	; 0x05
	*button->ddr &= ~(1 << button->btnPin); // 버튼 핀을 입력으로 설정, ->가 *보다 빠름
  d8:	fb 01       	movw	r30, r22
  da:	30 81       	ld	r19, Z
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Button_init+0x1e>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	2a 95       	dec	r18
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <Button_init+0x1a>
  ea:	80 95       	com	r24
  ec:	83 23       	and	r24, r19
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <BUTTON_getState>:
}

// 버튼 상태 반환 함수 정의
uint8_t BUTTON_getState(Button *button)
{
  f2:	fc 01       	movw	r30, r24
	uint8_t curState = *button->pin & (1<<button->btnPin); // 버튼 상태를 읽어옴
  f4:	a2 81       	ldd	r26, Z+2	; 0x02
  f6:	b3 81       	ldd	r27, Z+3	; 0x03
  f8:	8c 91       	ld	r24, X
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	04 80       	ldd	r0, Z+4	; 0x04
 100:	02 c0       	rjmp	.+4      	; 0x106 <BUTTON_getState+0x14>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <BUTTON_getState+0x10>
 10a:	28 23       	and	r18, r24
	
	if ((curState == PUSHED) && (button->prevState == RELEASED)) // 버튼을 안 누른 상태에서 누르면,
 10c:	59 f4       	brne	.+22     	; 0x124 <BUTTON_getState+0x32>
 10e:	85 81       	ldd	r24, Z+5	; 0x05
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	41 f4       	brne	.+16     	; 0x124 <BUTTON_getState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	a3 ed       	ldi	r26, 0xD3	; 211
 116:	b0 e3       	ldi	r27, 0x30	; 48
 118:	11 97       	sbiw	r26, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <BUTTON_getState+0x26>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <BUTTON_getState+0x2c>
 11e:	00 00       	nop
	{
		_delay_ms(50); // 디바운스 코드
		button->prevState = PUSHED; // 버튼을 누른 상태로 변환
 120:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSH; // 버튼이 눌려 있음을 반환
 122:	08 95       	ret
	}
	else if((curState != PUSHED) && (button->prevState == PUSHED)) // 버튼을 누른 상태에서 떼면,
 124:	22 23       	and	r18, r18
 126:	69 f0       	breq	.+26     	; 0x142 <BUTTON_getState+0x50>
 128:	85 81       	ldd	r24, Z+5	; 0x05
 12a:	81 11       	cpse	r24, r1
 12c:	0c c0       	rjmp	.+24     	; 0x146 <BUTTON_getState+0x54>
 12e:	83 ed       	ldi	r24, 0xD3	; 211
 130:	90 e3       	ldi	r25, 0x30	; 48
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <BUTTON_getState+0x40>
 136:	00 c0       	rjmp	.+0      	; 0x138 <BUTTON_getState+0x46>
 138:	00 00       	nop
	{
		_delay_ms(50); // 디바운스 코드
		button->prevState = RELEASED; // 버튼을 땐 상태로 변환
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED; // 버튼이 떨어진 것을 반환
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	08 95       	ret
	}
	return NO_ACT; // 아무 것도 안 했을 때
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
 146:	80 e0       	ldi	r24, 0x00	; 0
}
 148:	08 95       	ret

0000014a <BUTTON_spin_getState>:

uint8_t BUTTON_spin_getState(Button *button)
{
 14a:	fc 01       	movw	r30, r24
	uint8_t curState = *button->pin & (1<<button->btnPin); // 버튼 상태를 읽어옴
 14c:	a2 81       	ldd	r26, Z+2	; 0x02
 14e:	b3 81       	ldd	r27, Z+3	; 0x03
 150:	8c 91       	ld	r24, X
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	04 80       	ldd	r0, Z+4	; 0x04
 158:	02 c0       	rjmp	.+4      	; 0x15e <BUTTON_spin_getState+0x14>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <BUTTON_spin_getState+0x10>
 162:	28 23       	and	r18, r24
	
	if ((curState == PUSHED) && (button->prevState == RELEASED)) // 버튼을 안 누른 상태에서 누르면,
 164:	59 f4       	brne	.+22     	; 0x17c <BUTTON_spin_getState+0x32>
 166:	85 81       	ldd	r24, Z+5	; 0x05
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	41 f4       	brne	.+16     	; 0x17c <BUTTON_spin_getState+0x32>
 16c:	a3 ed       	ldi	r26, 0xD3	; 211
 16e:	b0 e3       	ldi	r27, 0x30	; 48
 170:	11 97       	sbiw	r26, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <BUTTON_spin_getState+0x26>
 174:	00 c0       	rjmp	.+0      	; 0x176 <BUTTON_spin_getState+0x2c>
 176:	00 00       	nop
	{
		_delay_ms(50); // 디바운스 코드
		button->prevState = PUSHED; // 버튼을 누른 상태로 변환
 178:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSH; // 버튼이 눌려 있음을 반환
 17a:	08 95       	ret
	}
	else if((curState != PUSHED) && (button->prevState == PUSHED)) // 버튼을 누른 상태에서 떼면,
 17c:	22 23       	and	r18, r18
 17e:	a9 f0       	breq	.+42     	; 0x1aa <BUTTON_spin_getState+0x60>
 180:	85 81       	ldd	r24, Z+5	; 0x05
 182:	81 11       	cpse	r24, r1
 184:	14 c0       	rjmp	.+40     	; 0x1ae <BUTTON_spin_getState+0x64>
 186:	83 ed       	ldi	r24, 0xD3	; 211
 188:	90 e3       	ldi	r25, 0x30	; 48
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <BUTTON_spin_getState+0x40>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <BUTTON_spin_getState+0x46>
 190:	00 00       	nop
	{
		_delay_ms(50); // 디바운스 코드
		button->prevState = RELEASED; // 버튼을 땐 상태로 변환
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	85 83       	std	Z+5, r24	; 0x05
		spin_cnt++;
 196:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 19a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
 1a4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
		return ACT_RELEASED, spin_cnt; // 버튼이 떨어진 것을 반환
 1a8:	08 95       	ret
	}
	return NO_ACT; // 아무 것도 안 했을 때
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret

000001b2 <Fan_Init>:
#include "Fan.h"

void Fan_Init()
{
	// I2C LCD 초기화
	LCD_Init();
 1b2:	22 d3       	rcall	.+1604   	; 0x7f8 <LCD_Init>
	
	// Button Setting
	LED_DDR = 0xff; // PORTA 출력 설정
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	8a bb       	out	0x1a, r24	; 26
	
	Button_init(&btnStop, &BUTTON_DDR, &BUTTON_PIN, BUTTON_STOP); // PORTC 0번 핀 입력 활성화
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	43 e3       	ldi	r20, 0x33	; 51
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	64 e3       	ldi	r22, 0x34	; 52
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	80 ec       	ldi	r24, 0xC0	; 192
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	80 df       	rcall	.-256    	; 0xc8 <Button_init>
	Button_init(&btn_1stage, &BUTTON_DDR, &BUTTON_PIN, BUTTON_1stage); // PORTC 1번 핀 입력 활성화
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	43 e3       	ldi	r20, 0x33	; 51
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	64 e3       	ldi	r22, 0x34	; 52
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	86 ec       	ldi	r24, 0xC6	; 198
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	78 df       	rcall	.-272    	; 0xc8 <Button_init>
	Button_init(&btn_2stage, &BUTTON_DDR, &BUTTON_PIN, BUTTON_2stage); // PORTC 2번 핀 입력 활성화
 1d8:	22 e0       	ldi	r18, 0x02	; 2
 1da:	43 e3       	ldi	r20, 0x33	; 51
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	64 e3       	ldi	r22, 0x34	; 52
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	8c ea       	ldi	r24, 0xAC	; 172
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	70 df       	rcall	.-288    	; 0xc8 <Button_init>
	Button_init(&btn_3stage, &BUTTON_DDR, &BUTTON_PIN, BUTTON_3stage); // PORTC 3번 핀 입력 활성화
 1e8:	23 e0       	ldi	r18, 0x03	; 3
 1ea:	43 e3       	ldi	r20, 0x33	; 51
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	64 e3       	ldi	r22, 0x34	; 52
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	8a eb       	ldi	r24, 0xBA	; 186
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	68 df       	rcall	.-304    	; 0xc8 <Button_init>
	Button_init(&btn_spin, &BUTTON_DDR, &BUTTON_PIN, BUTTON_spin); // PORTC 4번 핀 입력 활성화
 1f8:	24 e0       	ldi	r18, 0x04	; 4
 1fa:	43 e3       	ldi	r20, 0x33	; 51
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	64 e3       	ldi	r22, 0x34	; 52
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	84 eb       	ldi	r24, 0xB4	; 180
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	60 df       	rcall	.-320    	; 0xc8 <Button_init>
	
	// PWM Setting
	DDRF |= (1<<PINF4) | (1<<PINF5); // PINF4, 5 출력 설정
 208:	e1 e6       	ldi	r30, 0x61	; 97
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	80 63       	ori	r24, 0x30	; 48
 210:	80 83       	st	Z, r24
	TCCR0 |= (1<<CS02) | (1<<CS01) | (0<<CS00); // 256분주
 212:	83 b7       	in	r24, 0x33	; 51
 214:	86 60       	ori	r24, 0x06	; 6
 216:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01) | (1<<WGM00); // Fast PWM mode
 218:	83 b7       	in	r24, 0x33	; 51
 21a:	88 64       	ori	r24, 0x48	; 72
 21c:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01) | (0<<COM00); // 비반전 모드
 21e:	83 b7       	in	r24, 0x33	; 51
 220:	80 62       	ori	r24, 0x20	; 32
 222:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1<<DDRB4); // MOTOR 제어
 224:	87 b3       	in	r24, 0x17	; 23
 226:	80 61       	ori	r24, 0x10	; 16
 228:	87 bb       	out	0x17, r24	; 23
	
	// Head Spin
	TCCR1A |= (1<<WGM11) | (0<<WGM10); // Fast PWM(mode 14) 세팅
 22a:	8f b5       	in	r24, 0x2f	; 47
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13) | (1<<WGM12);
 230:	8e b5       	in	r24, 0x2e	; 46
 232:	88 61       	ori	r24, 0x18	; 24
 234:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1<<COM1A1) | (0<<COM1A0);
 236:	8f b5       	in	r24, 0x2f	; 47
 238:	80 68       	ori	r24, 0x80	; 128
 23a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0<<CS12) | (1<<CS11) | (1<<CS10);
 23c:	8e b5       	in	r24, 0x2e	; 46
 23e:	83 60       	ori	r24, 0x03	; 3
 240:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0x00; // default가 0이라 안 써줘도 됨		
 242:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ICR1 = 4999;
 246:	87 e8       	ldi	r24, 0x87	; 135
 248:	93 e1       	ldi	r25, 0x13	; 19
 24a:	97 bd       	out	0x27, r25	; 39
 24c:	86 bd       	out	0x26, r24	; 38
 24e:	08 95       	ret

00000250 <Fan_Start_signal>:
}

void Fan_Start_signal()
{
	// Fan Start Sign
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	96 d2       	rcall	.+1324   	; 0x780 <LCD_WriteCommand>
	LCD_WriteStringXY(0,0," Hello Modesty! ");
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	51 e0       	ldi	r21, 0x01	; 1
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	c4 d2       	rcall	.+1416   	; 0x7e6 <LCD_WriteStringXY>
	LCD_WriteStringXY(1,0,"Please Press Btn");
 25e:	41 e1       	ldi	r20, 0x11	; 17
 260:	51 e0       	ldi	r21, 0x01	; 1
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	bf d2       	rcall	.+1406   	; 0x7e6 <LCD_WriteStringXY>
 268:	2f eb       	ldi	r18, 0xBF	; 191
 26a:	87 e2       	ldi	r24, 0x27	; 39
 26c:	99 e0       	ldi	r25, 0x09	; 9
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <Fan_Start_signal+0x1e>
 276:	00 c0       	rjmp	.+0      	; 0x278 <Fan_Start_signal+0x28>
 278:	00 00       	nop
	_delay_ms(3000);
	Fan_run_status = Fan_initial;
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Fan_run_status+0x1>
 282:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Fan_run_status>
 286:	08 95       	ret

00000288 <Spin_status_LED>:
	}
}

void Spin_status_LED()
{
	if (spin_cnt == 1)
 288:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 28c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	19 f4       	brne	.+6      	; 0x29a <Spin_status_LED+0x12>
	{
		LED_PORT |= (1<<PINA3);
 294:	8b b3       	in	r24, 0x1b	; 27
 296:	88 60       	ori	r24, 0x08	; 8
 298:	8b bb       	out	0x1b, r24	; 27
 29a:	08 95       	ret

0000029c <Fan_Stage>:
	Fan_run_status = Fan_initial;
}

void Fan_Stage()
{
	if (BUTTON_getState(&btnStop) == ACT_RELEASED)
 29c:	80 ec       	ldi	r24, 0xC0	; 192
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	28 df       	rcall	.-432    	; 0xf2 <BUTTON_getState>
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	c1 f4       	brne	.+48     	; 0x2d6 <Fan_Stage+0x3a>
	{
		//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
		LED_PORT = 0x00;
 2a6:	1b ba       	out	0x1b, r1	; 27
		PORTF |= (1<<PINF4) | (1<<PINF5); // MOtor Break
 2a8:	e2 e6       	ldi	r30, 0x62	; 98
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	80 63       	ori	r24, 0x30	; 48
 2b0:	80 83       	st	Z, r24
		LCD_WriteStringXY(0,0,"   Stop mode    ");
 2b2:	42 e2       	ldi	r20, 0x22	; 34
 2b4:	51 e0       	ldi	r21, 0x01	; 1
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	95 d2       	rcall	.+1322   	; 0x7e6 <LCD_WriteStringXY>
		LCD_WriteStringXY(1,0,"  Power :   0%  ");
 2bc:	43 e3       	ldi	r20, 0x33	; 51
 2be:	51 e0       	ldi	r21, 0x01	; 1
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 d2       	rcall	.+1312   	; 0x7e6 <LCD_WriteStringXY>
		Fan_run_status = Fan_stop;
 2c6:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <Fan_run_status+0x1>
 2ca:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <Fan_run_status>
		spin_cnt = 0;
 2ce:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 2d2:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
		//_delay_ms(3000);
		//Fan_Start_signal();
		//Fan_run_status = Fan_stop;		
	}
	if(BUTTON_getState(&btn_1stage) == ACT_RELEASED)
 2d6:	86 ec       	ldi	r24, 0xC6	; 198
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0b df       	rcall	.-490    	; 0xf2 <BUTTON_getState>
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	11 f5       	brne	.+68     	; 0x324 <Fan_Stage+0x88>
	{
		//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
		// PORTF |= (1<<PINF4) | (1<<PINF5); // Pulse가 중첩되어 더 커지는 것을 방지하기 위한 MOtor Break
		// DDRB &= ~(1<<PINB4); // Pulse가 중첩되어 더 커지는 것을 방지하기 위한 MOtor Break
		LED_PORT = 0x00;
 2e0:	1b ba       	out	0x1b, r1	; 27
		LED_PORT |= (1<<PINA0);
 2e2:	8b b3       	in	r24, 0x1b	; 27
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	8b bb       	out	0x1b, r24	; 27
		DDRB |= (1<<PINB4);
 2e8:	87 b3       	in	r24, 0x17	; 23
 2ea:	80 61       	ori	r24, 0x10	; 16
 2ec:	87 bb       	out	0x17, r24	; 23
		OCR0 = 64; // 25%
 2ee:	80 e4       	ldi	r24, 0x40	; 64
 2f0:	81 bf       	out	0x31, r24	; 49
		PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 2f2:	e2 e6       	ldi	r30, 0x62	; 98
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	8f 7d       	andi	r24, 0xDF	; 223
 2fa:	80 83       	st	Z, r24
		PORTF |= (1<<PINF4);
 2fc:	80 81       	ld	r24, Z
 2fe:	80 61       	ori	r24, 0x10	; 16
 300:	80 83       	st	Z, r24
		LCD_WriteStringXY(0,0,"   1st Stage    ");
 302:	44 e4       	ldi	r20, 0x44	; 68
 304:	51 e0       	ldi	r21, 0x01	; 1
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	6d d2       	rcall	.+1242   	; 0x7e6 <LCD_WriteStringXY>
		LCD_WriteStringXY(1,0,"  Power :  25%  ");
 30c:	45 e5       	ldi	r20, 0x55	; 85
 30e:	51 e0       	ldi	r21, 0x01	; 1
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	68 d2       	rcall	.+1232   	; 0x7e6 <LCD_WriteStringXY>
		Spin_status_LED();
 316:	b8 df       	rcall	.-144    	; 0x288 <Spin_status_LED>
 318:	81 e0       	ldi	r24, 0x01	; 1
		Fan_run_status = Fan_1st;
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Fan_run_status+0x1>
 320:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Fan_run_status>

	}
	if(BUTTON_getState(&btn_2stage) == ACT_RELEASED)
 324:	8c ea       	ldi	r24, 0xAC	; 172
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	e4 de       	rcall	.-568    	; 0xf2 <BUTTON_getState>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	11 f5       	brne	.+68     	; 0x372 <Fan_Stage+0xd6>
 32e:	1b ba       	out	0x1b, r1	; 27
	{
		//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
		// DDRB &= ~(1<<PINB4); // Pulse가 중첩되어 더 커지는 것을 방지하기 위한 MOtor Break
		LED_PORT = 0x00;
 330:	8b b3       	in	r24, 0x1b	; 27
		LED_PORT |= (1<<PINA0) | (1<<PINA1);
 332:	83 60       	ori	r24, 0x03	; 3
 334:	8b bb       	out	0x1b, r24	; 27
 336:	87 b3       	in	r24, 0x17	; 23
		DDRB |= (1<<PINB4);
 338:	80 61       	ori	r24, 0x10	; 16
 33a:	87 bb       	out	0x17, r24	; 23
 33c:	80 e8       	ldi	r24, 0x80	; 128
		OCR0 = 128; // 50%
 33e:	81 bf       	out	0x31, r24	; 49
 340:	e2 e6       	ldi	r30, 0x62	; 98
		PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	8f 7d       	andi	r24, 0xDF	; 223
 348:	80 83       	st	Z, r24
		PORTF |= (1<<PINF4);
 34a:	80 81       	ld	r24, Z
 34c:	80 61       	ori	r24, 0x10	; 16
 34e:	80 83       	st	Z, r24
		LCD_WriteStringXY(0,0,"   2nd Stage    ");
 350:	46 e6       	ldi	r20, 0x66	; 102
 352:	51 e0       	ldi	r21, 0x01	; 1
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	80 e0       	ldi	r24, 0x00	; 0
		LCD_WriteStringXY(1,0,"  Power :  50%  ");
 358:	46 d2       	rcall	.+1164   	; 0x7e6 <LCD_WriteStringXY>
 35a:	47 e7       	ldi	r20, 0x77	; 119
 35c:	51 e0       	ldi	r21, 0x01	; 1
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
		Spin_status_LED();
 362:	41 d2       	rcall	.+1154   	; 0x7e6 <LCD_WriteStringXY>
 364:	91 df       	rcall	.-222    	; 0x288 <Spin_status_LED>
		Fan_run_status = Fan_2nd;
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Fan_run_status+0x1>
 36e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Fan_run_status>
	}
	if(BUTTON_getState(&btn_3stage) == ACT_RELEASED)
 372:	8a eb       	ldi	r24, 0xBA	; 186
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	bd de       	rcall	.-646    	; 0xf2 <BUTTON_getState>
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	11 f5       	brne	.+68     	; 0x3c0 <Fan_Stage+0x124>
 37c:	1b ba       	out	0x1b, r1	; 27
	{
		//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
		// PORTF |= (1<<PINF4) | (1<<PINF5); // Pulse가 중첩되어 더 커지는 것을 방지하기 위한 MOtor Break
		// DDRB &= ~(1<<PINB4); // Pulse가 중첩되어 더 커지는 것을 방지하기 위한 MOtor Break
		LED_PORT = 0x00;
 37e:	8b b3       	in	r24, 0x1b	; 27
		LED_PORT |= (1<<PINA0) | (1<<PINA1) | (1<<PINA2);
 380:	87 60       	ori	r24, 0x07	; 7
 382:	8b bb       	out	0x1b, r24	; 27
 384:	87 b3       	in	r24, 0x17	; 23
		DDRB |= (1<<PINB4);
 386:	80 61       	ori	r24, 0x10	; 16
 388:	87 bb       	out	0x17, r24	; 23
 38a:	8f ef       	ldi	r24, 0xFF	; 255
		OCR0 = 255; // 100%
 38c:	81 bf       	out	0x31, r24	; 49
 38e:	e2 e6       	ldi	r30, 0x62	; 98
		PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	8f 7d       	andi	r24, 0xDF	; 223
 396:	80 83       	st	Z, r24
		PORTF |= (1<<PINF4);
 398:	80 81       	ld	r24, Z
		LCD_WriteStringXY(0,0,"   3rd Stage    ");
 39a:	80 61       	ori	r24, 0x10	; 16
 39c:	80 83       	st	Z, r24
 39e:	48 e8       	ldi	r20, 0x88	; 136
 3a0:	51 e0       	ldi	r21, 0x01	; 1
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
		LCD_WriteStringXY(1,0,"  Power : 100%  ");
 3a6:	1f d2       	rcall	.+1086   	; 0x7e6 <LCD_WriteStringXY>
 3a8:	49 e9       	ldi	r20, 0x99	; 153
 3aa:	51 e0       	ldi	r21, 0x01	; 1
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	1a d2       	rcall	.+1076   	; 0x7e6 <LCD_WriteStringXY>
		Spin_status_LED();
 3b2:	6a df       	rcall	.-300    	; 0x288 <Spin_status_LED>
 3b4:	83 e0       	ldi	r24, 0x03	; 3
		Fan_run_status = Fan_3rd;
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Fan_run_status+0x1>
 3bc:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Fan_run_status>
 3c0:	08 95       	ret

000003c2 <Fan_continue_run>:
 3c2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <Fan_run_status>
	}
}

void Fan_continue_run()
{
	switch (Fan_run_status)
 3c6:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <Fan_run_status+0x1>
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	91 05       	cpc	r25, r1
 3ce:	51 f1       	breq	.+84     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3d0:	1c f4       	brge	.+6      	; 0x3d8 <Fan_continue_run+0x16>
 3d2:	89 2b       	or	r24, r25
 3d4:	49 f0       	breq	.+18     	; 0x3e8 <Fan_continue_run+0x26>
 3d6:	08 95       	ret
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	91 05       	cpc	r25, r1
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <Fan_continue_run+0x1e>
 3de:	46 c0       	rjmp	.+140    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 3e0:	03 97       	sbiw	r24, 0x03	; 3
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <Fan_continue_run+0x24>
 3e4:	67 c0       	rjmp	.+206    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 3e6:	08 95       	ret
	{
		case 0:
			//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
			LED_PORT = 0x00;
 3e8:	1b ba       	out	0x1b, r1	; 27
			PORTF |= (1<<PINF4) | (1<<PINF5); // MOtor Break
 3ea:	e2 e6       	ldi	r30, 0x62	; 98
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	80 63       	ori	r24, 0x30	; 48
 3f2:	80 83       	st	Z, r24
			DDRB &= ~(1<<PINB4);
 3f4:	87 b3       	in	r24, 0x17	; 23
 3f6:	8f 7e       	andi	r24, 0xEF	; 239
 3f8:	87 bb       	out	0x17, r24	; 23
			LCD_WriteStringXY(0,0,"   Stop mode    ");
 3fa:	42 e2       	ldi	r20, 0x22	; 34
 3fc:	51 e0       	ldi	r21, 0x01	; 1
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	f1 d1       	rcall	.+994    	; 0x7e6 <LCD_WriteStringXY>
			LCD_WriteStringXY(1,0,"  Power :   0%  ");
 404:	43 e3       	ldi	r20, 0x33	; 51
 406:	51 e0       	ldi	r21, 0x01	; 1
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	ec d1       	rcall	.+984    	; 0x7e6 <LCD_WriteStringXY>
			Fan_run_status = Fan_stop;
 40e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <Fan_run_status+0x1>
 412:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <Fan_run_status>
			spin_cnt = 0;
 416:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 41a:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
			Spin_status_LED();
 41e:	34 df       	rcall	.-408    	; 0x288 <Spin_status_LED>
			Fan_Stage();
 420:	3d cf       	rjmp	.-390    	; 0x29c <Fan_Stage>
 422:	08 95       	ret
			break;
 424:	1b ba       	out	0x1b, r1	; 27
		
		case 1 :
			//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
			LED_PORT = 0x00;
 426:	8b b3       	in	r24, 0x1b	; 27
			LED_PORT |= (1<<PINA0);
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	8b bb       	out	0x1b, r24	; 27
 42c:	87 b3       	in	r24, 0x17	; 23
			DDRB |= (1<<PINB4);
 42e:	80 61       	ori	r24, 0x10	; 16
 430:	87 bb       	out	0x17, r24	; 23
 432:	80 e4       	ldi	r24, 0x40	; 64
			OCR0 = 64; // 25%
 434:	81 bf       	out	0x31, r24	; 49
 436:	e2 e6       	ldi	r30, 0x62	; 98
			PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	8f 7d       	andi	r24, 0xDF	; 223
 43e:	80 83       	st	Z, r24
 440:	80 81       	ld	r24, Z
			PORTF |= (1<<PINF4);
 442:	80 61       	ori	r24, 0x10	; 16
 444:	80 83       	st	Z, r24
 446:	44 e4       	ldi	r20, 0x44	; 68
			LCD_WriteStringXY(0,0,"   1st Stage    ");
 448:	51 e0       	ldi	r21, 0x01	; 1
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	cb d1       	rcall	.+918    	; 0x7e6 <LCD_WriteStringXY>
 450:	45 e5       	ldi	r20, 0x55	; 85
			LCD_WriteStringXY(1,0,"  Power :  25%  ");
 452:	51 e0       	ldi	r21, 0x01	; 1
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	c6 d1       	rcall	.+908    	; 0x7e6 <LCD_WriteStringXY>
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
			Fan_run_status = Fan_1st;
 45e:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Fan_run_status+0x1>
 462:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Fan_run_status>
			Spin_status_LED();
 466:	10 df       	rcall	.-480    	; 0x288 <Spin_status_LED>
 468:	19 cf       	rjmp	.-462    	; 0x29c <Fan_Stage>
			Fan_Stage();
 46a:	08 95       	ret
 46c:	1b ba       	out	0x1b, r1	; 27
		break;
 46e:	8b b3       	in	r24, 0x1b	; 27
		
		case 2 :
			//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
			LED_PORT = 0x00;
 470:	83 60       	ori	r24, 0x03	; 3
			LED_PORT |= (1<<PINA0) | (1<<PINA1);
 472:	8b bb       	out	0x1b, r24	; 27
 474:	87 b3       	in	r24, 0x17	; 23
 476:	80 61       	ori	r24, 0x10	; 16
			DDRB |= (1<<PINB4);
 478:	87 bb       	out	0x17, r24	; 23
 47a:	80 e8       	ldi	r24, 0x80	; 128
 47c:	81 bf       	out	0x31, r24	; 49
			OCR0 = 128; // 50%
 47e:	e2 e6       	ldi	r30, 0x62	; 98
 480:	f0 e0       	ldi	r31, 0x00	; 0
			PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 482:	80 81       	ld	r24, Z
 484:	8f 7d       	andi	r24, 0xDF	; 223
 486:	80 83       	st	Z, r24
 488:	80 81       	ld	r24, Z
			PORTF |= (1<<PINF4);
 48a:	80 61       	ori	r24, 0x10	; 16
 48c:	80 83       	st	Z, r24
 48e:	46 e6       	ldi	r20, 0x66	; 102
			LCD_WriteStringXY(0,0,"   2nd Stage    ");
 490:	51 e0       	ldi	r21, 0x01	; 1
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	a7 d1       	rcall	.+846    	; 0x7e6 <LCD_WriteStringXY>
 498:	47 e7       	ldi	r20, 0x77	; 119
			LCD_WriteStringXY(1,0,"  Power :  50%  ");
 49a:	51 e0       	ldi	r21, 0x01	; 1
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	a2 d1       	rcall	.+836    	; 0x7e6 <LCD_WriteStringXY>
			Fan_run_status = Fan_2nd;
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Fan_run_status+0x1>
 4aa:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Fan_run_status>
			Spin_status_LED();
 4ae:	ec de       	rcall	.-552    	; 0x288 <Spin_status_LED>
 4b0:	f5 ce       	rjmp	.-534    	; 0x29c <Fan_Stage>
			Fan_Stage();
 4b2:	08 95       	ret
 4b4:	1b ba       	out	0x1b, r1	; 27
		break;
 4b6:	8b b3       	in	r24, 0x1b	; 27
		
		case 3 :
			//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
			LED_PORT = 0x00;
 4b8:	87 60       	ori	r24, 0x07	; 7
			LED_PORT |= (1<<PINA0) | (1<<PINA1) | (1<<PINA2);
 4ba:	8b bb       	out	0x1b, r24	; 27
 4bc:	87 b3       	in	r24, 0x17	; 23
 4be:	80 61       	ori	r24, 0x10	; 16
			DDRB |= (1<<PINB4);
 4c0:	87 bb       	out	0x17, r24	; 23
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	81 bf       	out	0x31, r24	; 49
			OCR0 = 255; // 100%
 4c6:	e2 e6       	ldi	r30, 0x62	; 98
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
			PORTF &= ~(1<<PINF5); // Motor 정방향 회전
 4ca:	80 81       	ld	r24, Z
 4cc:	8f 7d       	andi	r24, 0xDF	; 223
 4ce:	80 83       	st	Z, r24
 4d0:	80 81       	ld	r24, Z
			PORTF |= (1<<PINF4);
 4d2:	80 61       	ori	r24, 0x10	; 16
 4d4:	80 83       	st	Z, r24
			LCD_WriteStringXY(0,0,"   3rd Stage    ");
 4d6:	48 e8       	ldi	r20, 0x88	; 136
 4d8:	51 e0       	ldi	r21, 0x01	; 1
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	83 d1       	rcall	.+774    	; 0x7e6 <LCD_WriteStringXY>
			LCD_WriteStringXY(1,0,"  Power : 100%  ");
 4e0:	49 e9       	ldi	r20, 0x99	; 153
 4e2:	51 e0       	ldi	r21, 0x01	; 1
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	7e d1       	rcall	.+764    	; 0x7e6 <LCD_WriteStringXY>
 4ea:	83 e0       	ldi	r24, 0x03	; 3
			Fan_run_status = Fan_3rd;
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Fan_run_status+0x1>
 4f2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Fan_run_status>
 4f6:	c8 de       	rcall	.-624    	; 0x288 <Spin_status_LED>
			Spin_status_LED();
 4f8:	d1 ce       	rjmp	.-606    	; 0x29c <Fan_Stage>
 4fa:	08 95       	ret

000004fc <Display_LCD>:
			Fan_Stage();
 4fc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <Fan_run_status>
 500:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <Fan_run_status+0x1>
	}
}

void Display_LCD()
{
	switch (Fan_run_status)
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	91 05       	cpc	r25, r1
 508:	d9 f0       	breq	.+54     	; 0x540 <Display_LCD+0x44>
 50a:	1c f4       	brge	.+6      	; 0x512 <Display_LCD+0x16>
 50c:	89 2b       	or	r24, r25
 50e:	41 f0       	breq	.+16     	; 0x520 <Display_LCD+0x24>
 510:	08 95       	ret
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	91 05       	cpc	r25, r1
 516:	39 f1       	breq	.+78     	; 0x566 <Display_LCD+0x6a>
 518:	03 97       	sbiw	r24, 0x03	; 3
 51a:	09 f4       	brne	.+2      	; 0x51e <Display_LCD+0x22>
 51c:	37 c0       	rjmp	.+110    	; 0x58c <Display_LCD+0x90>
 51e:	08 95       	ret
	{
		case 0:
		//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
		LCD_WriteStringXY(0,0,"   Stop mode    ");
 520:	42 e2       	ldi	r20, 0x22	; 34
 522:	51 e0       	ldi	r21, 0x01	; 1
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	5e d1       	rcall	.+700    	; 0x7e6 <LCD_WriteStringXY>
		LCD_WriteStringXY(1,0,"  Power :   0%  ");
 52a:	43 e3       	ldi	r20, 0x33	; 51
 52c:	51 e0       	ldi	r21, 0x01	; 1
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	59 d1       	rcall	.+690    	; 0x7e6 <LCD_WriteStringXY>
		//Spin_status_LED();
		Fan_run_status = Fan_stop;
 534:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <Fan_run_status+0x1>
 538:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <Fan_run_status>
		Fan_Stage();
 53c:	af ce       	rjmp	.-674    	; 0x29c <Fan_Stage>
		break;
 53e:	08 95       	ret
		
		case 1 :
		//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
		LCD_WriteStringXY(0,0,"   1st Stage    ");
 540:	44 e4       	ldi	r20, 0x44	; 68
 542:	51 e0       	ldi	r21, 0x01	; 1
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	4e d1       	rcall	.+668    	; 0x7e6 <LCD_WriteStringXY>
		LCD_WriteStringXY(1,0,"  Power :  25%  ");
 54a:	45 e5       	ldi	r20, 0x55	; 85
 54c:	51 e0       	ldi	r21, 0x01	; 1
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	49 d1       	rcall	.+658    	; 0x7e6 <LCD_WriteStringXY>
		//Spin_status_LED();
		Fan_run_status = Fan_1st;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Fan_run_status+0x1>
		Fan_Stage();
 55c:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Fan_run_status>
		Fan_continue_run();
 560:	9d de       	rcall	.-710    	; 0x29c <Fan_Stage>
		break;
 562:	2f cf       	rjmp	.-418    	; 0x3c2 <Fan_continue_run>
		
		case 2 :
		//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
		LCD_WriteStringXY(0,0,"   2nd Stage    ");
 564:	08 95       	ret
 566:	46 e6       	ldi	r20, 0x66	; 102
 568:	51 e0       	ldi	r21, 0x01	; 1
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
		LCD_WriteStringXY(1,0,"  Power :  50%  ");
 56e:	3b d1       	rcall	.+630    	; 0x7e6 <LCD_WriteStringXY>
 570:	47 e7       	ldi	r20, 0x77	; 119
 572:	51 e0       	ldi	r21, 0x01	; 1
 574:	60 e0       	ldi	r22, 0x00	; 0
		//Spin_status_LED();
		Fan_run_status = Fan_2nd;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	36 d1       	rcall	.+620    	; 0x7e6 <LCD_WriteStringXY>
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Fan_run_status+0x1>
		Fan_Stage();
 582:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Fan_run_status>
		Fan_continue_run();
		break;
 586:	8a de       	rcall	.-748    	; 0x29c <Fan_Stage>
		
		case 3 :
		//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
		LCD_WriteStringXY(0,0,"   3rd Stage    ");
 588:	1c cf       	rjmp	.-456    	; 0x3c2 <Fan_continue_run>
 58a:	08 95       	ret
 58c:	48 e8       	ldi	r20, 0x88	; 136
 58e:	51 e0       	ldi	r21, 0x01	; 1
 590:	60 e0       	ldi	r22, 0x00	; 0
		LCD_WriteStringXY(1,0,"  Power : 100%  ");
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	28 d1       	rcall	.+592    	; 0x7e6 <LCD_WriteStringXY>
 596:	49 e9       	ldi	r20, 0x99	; 153
 598:	51 e0       	ldi	r21, 0x01	; 1
 59a:	60 e0       	ldi	r22, 0x00	; 0
		//Spin_status_LED();
		Fan_run_status = Fan_3rd;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	23 d1       	rcall	.+582    	; 0x7e6 <LCD_WriteStringXY>
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Fan_run_status+0x1>
		Fan_Stage();
 5a8:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Fan_run_status>
		Fan_continue_run();
 5ac:	77 de       	rcall	.-786    	; 0x29c <Fan_Stage>
 5ae:	09 cf       	rjmp	.-494    	; 0x3c2 <Fan_continue_run>
 5b0:	08 95       	ret

000005b2 <Spin_stop>:
	// else LED_PORT &= ~(1<<PINA3);
}

void Spin_stop()
{
	LED_PORT &= ~(1<<PINA3);
 5b2:	8b b3       	in	r24, 0x1b	; 27
 5b4:	87 7f       	andi	r24, 0xF7	; 247
 5b6:	8b bb       	out	0x1b, r24	; 27
	TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0)); // PWM 출력 안 되도록
 5b8:	8f b5       	in	r24, 0x2f	; 47
 5ba:	8f 73       	andi	r24, 0x3F	; 63
 5bc:	8f bd       	out	0x2f, r24	; 47
 5be:	08 95       	ret

000005c0 <Spin_start>:

void Spin_start(uint8_t degree)
{
	// 0도 : 125 / 180도 : 625
	uint16_t degree_value;
	TCCR1A |= (1<<COM1A1); // PWM 다시 출력되도록
 5c0:	9f b5       	in	r25, 0x2f	; 47
 5c2:	90 68       	ori	r25, 0x80	; 128
 5c4:	9f bd       	out	0x2f, r25	; 47
	if (degree_value < 0) // 제한 범위를 벗어나 고장나지 않도록 설정
	{
		degree = 0;
	}
	else if(degree > 180)
 5c6:	85 3b       	cpi	r24, 0xB5	; 181
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <Spin_start+0xc>
	{
		degree = 180;
 5ca:	84 eb       	ldi	r24, 0xB4	; 180
	}
	degree_value = (uint16_t)((degree/180.0)*500 + 125); // 우리가 흔히 쓰는 각도로 표현하기 위한 식
 5cc:	68 2f       	mov	r22, r24
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	3b d2       	rcall	.+1142   	; 0xa4c <__floatsisf>
 5d6:	20 e0       	ldi	r18, 0x00	; 0
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	44 e3       	ldi	r20, 0x34	; 52
 5dc:	53 e4       	ldi	r21, 0x43	; 67
 5de:	a0 d1       	rcall	.+832    	; 0x920 <__divsf3>
 5e0:	20 e0       	ldi	r18, 0x00	; 0
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	4a ef       	ldi	r20, 0xFA	; 250
 5e6:	53 e4       	ldi	r21, 0x43	; 67
 5e8:	bd d2       	rcall	.+1402   	; 0xb64 <__mulsf3>
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	4a ef       	ldi	r20, 0xFA	; 250
 5f0:	52 e4       	ldi	r21, 0x42	; 66
 5f2:	32 d1       	rcall	.+612    	; 0x858 <__addsf3>
 5f4:	fd d1       	rcall	.+1018   	; 0x9f0 <__fixunssfsi>
	OCR1A = degree_value;
 5f6:	7b bd       	out	0x2b, r23	; 43
 5f8:	6a bd       	out	0x2a, r22	; 42
 5fa:	08 95       	ret

000005fc <Head_spin_op>:
		//break;
	}
}

void Head_spin_op()
{
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
	BUTTON_spin_getState(&btn_spin);
 600:	84 eb       	ldi	r24, 0xB4	; 180
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	a2 dd       	rcall	.-1212   	; 0x14a <BUTTON_spin_getState>
	switch (spin_cnt)
 606:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 60a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	09 f0       	breq	.+2      	; 0x614 <Head_spin_op+0x18>
	{
		case 1:
		//Spin_status_LED();
		Fan_continue_run();
 612:	4a c0       	rjmp	.+148    	; 0x6a8 <Head_spin_op+0xac>
		Display_LCD();
 614:	d6 de       	rcall	.-596    	; 0x3c2 <Fan_continue_run>
 616:	72 df       	rcall	.-284    	; 0x4fc <Display_LCD>
		DDRB = (1<<PINB5);
 618:	80 e2       	ldi	r24, 0x20	; 32
		BUTTON_spin_getState(&btn_spin);
 61a:	87 bb       	out	0x17, r24	; 23
 61c:	84 eb       	ldi	r24, 0xB4	; 180
 61e:	91 e0       	ldi	r25, 0x01	; 1
		while((spin_cnt == 1))
 620:	94 dd       	rcall	.-1240   	; 0x14a <BUTTON_spin_getState>
		{
			Spin_status_LED();
 622:	3a c0       	rjmp	.+116    	; 0x698 <Head_spin_op+0x9c>
 624:	31 de       	rcall	.-926    	; 0x288 <Spin_status_LED>
			for (int i = 0; i < 90 ; i++)
 626:	c0 e0       	ldi	r28, 0x00	; 0
			{
				//Spin_status_LED();
				BUTTON_spin_getState(&btn_spin);
 628:	d0 e0       	ldi	r29, 0x00	; 0
 62a:	17 c0       	rjmp	.+46     	; 0x65a <Head_spin_op+0x5e>
 62c:	84 eb       	ldi	r24, 0xB4	; 180
				Fan_continue_run();
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	8c dd       	rcall	.-1256   	; 0x14a <BUTTON_spin_getState>
				Display_LCD();
 632:	c7 de       	rcall	.-626    	; 0x3c2 <Fan_continue_run>
 634:	63 df       	rcall	.-314    	; 0x4fc <Display_LCD>
				Spin_start(2*i);
 636:	8c 2f       	mov	r24, r28
 638:	88 0f       	add	r24, r24
 63a:	c2 df       	rcall	.-124    	; 0x5c0 <Spin_start>
				//_delay_ms(5);
				if (spin_cnt != 1)
 63c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 640:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 644:	01 97       	sbiw	r24, 0x01	; 1
 646:	41 f0       	breq	.+16     	; 0x658 <Head_spin_op+0x5c>
				{
					Display_LCD();
 648:	59 df       	rcall	.-334    	; 0x4fc <Display_LCD>
 64a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
					spin_cnt = 0;
 64e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 652:	c0 e0       	ldi	r28, 0x00	; 0
		DDRB = (1<<PINB5);
		BUTTON_spin_getState(&btn_spin);
		while((spin_cnt == 1))
		{
			Spin_status_LED();
			for (int i = 0; i < 90 ; i++)
 654:	d0 e0       	ldi	r29, 0x00	; 0
 656:	1d c0       	rjmp	.+58     	; 0x692 <Head_spin_op+0x96>
 658:	21 96       	adiw	r28, 0x01	; 1
 65a:	ca 35       	cpi	r28, 0x5A	; 90
 65c:	d1 05       	cpc	r29, r1
 65e:	34 f3       	brlt	.-52     	; 0x62c <Head_spin_op+0x30>
				}
			}
			for (int j = 0; j < 90 ; j++)
			{
				//Spin_status_LED();
				BUTTON_spin_getState(&btn_spin);
 660:	f8 cf       	rjmp	.-16     	; 0x652 <Head_spin_op+0x56>
 662:	84 eb       	ldi	r24, 0xB4	; 180
 664:	91 e0       	ldi	r25, 0x01	; 1
				Fan_continue_run();
 666:	71 dd       	rcall	.-1310   	; 0x14a <BUTTON_spin_getState>
 668:	ac de       	rcall	.-680    	; 0x3c2 <Fan_continue_run>
				Display_LCD();
 66a:	48 df       	rcall	.-368    	; 0x4fc <Display_LCD>
				Spin_start(180-2*j);
 66c:	8a e5       	ldi	r24, 0x5A	; 90
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	8c 1b       	sub	r24, r28
 672:	9d 0b       	sbc	r25, r29
 674:	88 0f       	add	r24, r24
 676:	a4 df       	rcall	.-184    	; 0x5c0 <Spin_start>
 678:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
				//_delay_ms(5);
				if (spin_cnt != 1)
 67c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	31 f0       	breq	.+12     	; 0x690 <Head_spin_op+0x94>
 684:	3b df       	rcall	.-394    	; 0x4fc <Display_LCD>
				{
					Display_LCD();
 686:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
					spin_cnt = 0;
 68a:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 68e:	04 c0       	rjmp	.+8      	; 0x698 <Head_spin_op+0x9c>
 690:	21 96       	adiw	r28, 0x01	; 1
					Display_LCD();
					spin_cnt = 0;
					break;
				}
			}
			for (int j = 0; j < 90 ; j++)
 692:	ca 35       	cpi	r28, 0x5A	; 90
		//Spin_status_LED();
		Fan_continue_run();
		Display_LCD();
		DDRB = (1<<PINB5);
		BUTTON_spin_getState(&btn_spin);
		while((spin_cnt == 1))
 694:	d1 05       	cpc	r29, r1
 696:	2c f3       	brlt	.-54     	; 0x662 <Head_spin_op+0x66>
 698:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 69c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <Head_spin_op+0xaa>
			}
		}
		break;
	
		default:
		BUTTON_spin_getState(&btn_spin);
 6a4:	bf cf       	rjmp	.-130    	; 0x624 <Head_spin_op+0x28>
 6a6:	0b c0       	rjmp	.+22     	; 0x6be <Head_spin_op+0xc2>
 6a8:	84 eb       	ldi	r24, 0xB4	; 180
 6aa:	91 e0       	ldi	r25, 0x01	; 1
		Spin_status_LED();
 6ac:	4e dd       	rcall	.-1380   	; 0x14a <BUTTON_spin_getState>
 6ae:	ec dd       	rcall	.-1064   	; 0x288 <Spin_status_LED>
		Fan_continue_run();
 6b0:	88 de       	rcall	.-752    	; 0x3c2 <Fan_continue_run>
 6b2:	24 df       	rcall	.-440    	; 0x4fc <Display_LCD>
		Display_LCD();
 6b4:	7e df       	rcall	.-260    	; 0x5b2 <Spin_stop>
 6b6:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
		Spin_stop();
 6ba:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
		spin_cnt = 0;
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	08 95       	ret

000006c4 <I2C_Init>:
#include "I2C.h"


void I2C_Init()
{
	I2C_DDR |= (1<<I2C_SCL) | (1<<I2C_SDA); // 출력 설정
 6c4:	81 b3       	in	r24, 0x11	; 17
 6c6:	83 60       	ori	r24, 0x03	; 3
 6c8:	81 bb       	out	0x11, r24	; 17
	TWBR = 72; // 100KHz
 6ca:	88 e4       	ldi	r24, 0x48	; 72
 6cc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 6d0:	08 95       	ret

000006d2 <I2C_Start>:
	// TWBR = 12; // 400KHz
}

void I2C_Start()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // 1을 보내는 것은, S/W적으로 플래그를 Clear해주는 것이다.
 6d2:	84 ea       	ldi	r24, 0xA4	; 164
 6d4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	                                            // 1 Set하여 인터럽트 발생시키는 것이 아님.
	while(!(TWCR & (1<<TWINT))); // 하드웨어적으로 TWINT 시점을 결정
 6d8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 6dc:	88 23       	and	r24, r24
 6de:	e4 f7       	brge	.-8      	; 0x6d8 <I2C_Start+0x6>
	                             // 기다렸다가 조건이 만족되면 while문 수행
}
 6e0:	08 95       	ret

000006e2 <I2C_Stop>:

void I2C_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // Stop 비트 설정
 6e2:	84 e9       	ldi	r24, 0x94	; 148
 6e4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 6e8:	08 95       	ret

000006ea <I2C_TxData>:
}

void I2C_TxData(uint8_t data) // data 1바이트 전송
{
	TWDR = data;
 6ea:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
 6ee:	84 e8       	ldi	r24, 0x84	; 132
 6f0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT))); // 전송 완료 대기
 6f4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 6f8:	88 23       	and	r24, r24
 6fa:	e4 f7       	brge	.-8      	; 0x6f4 <I2C_TxData+0xa>
}
 6fc:	08 95       	ret

000006fe <I2C_TxByte>:

void I2C_TxByte(uint8_t devAddrRW, uint8_t data)
{
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	d8 2f       	mov	r29, r24
 704:	c6 2f       	mov	r28, r22
	I2C_Start();
 706:	e5 df       	rcall	.-54     	; 0x6d2 <I2C_Start>
	I2C_TxData(devAddrRW); // 읽을 것이냐 쓸 것이냐
 708:	8d 2f       	mov	r24, r29
 70a:	ef df       	rcall	.-34     	; 0x6ea <I2C_TxData>
	I2C_TxData(data); // 입/출력할 데이터 보냄
 70c:	8c 2f       	mov	r24, r28
 70e:	ed df       	rcall	.-38     	; 0x6ea <I2C_TxData>
	I2C_Stop();
 710:	e8 df       	rcall	.-48     	; 0x6e2 <I2C_Stop>
 712:	df 91       	pop	r29
 714:	cf 91       	pop	r28
 716:	08 95       	ret

00000718 <LCD_EnablePin>:
 718:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <I2C_LCD_Data>
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}

void LCD_EnablePin()
{
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 71c:	6b 7f       	andi	r22, 0xFB	; 251
 71e:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 722:	8e e4       	ldi	r24, 0x4E	; 78
 724:	ec df       	rcall	.-40     	; 0x6fe <I2C_TxByte>
	
	I2C_LCD_Data |= (1<<LCD_E); // High 설정
 726:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <I2C_LCD_Data>
 72a:	64 60       	ori	r22, 0x04	; 4
 72c:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 730:	8e e4       	ldi	r24, 0x4E	; 78
 732:	e5 df       	rcall	.-54     	; 0x6fe <I2C_TxByte>
	
	I2C_LCD_Data &= ~(1<<LCD_E); // E low 설정
 734:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <I2C_LCD_Data>
 738:	6b 7f       	andi	r22, 0xFB	; 251
 73a:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 73e:	8e e4       	ldi	r24, 0x4E	; 78
 740:	de df       	rcall	.-68     	; 0x6fe <I2C_TxByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	98 e1       	ldi	r25, 0x18	; 24
 746:	01 97       	sbiw	r24, 0x01	; 1
 748:	f1 f7       	brne	.-4      	; 0x746 <LCD_EnablePin+0x2e>
 74a:	00 c0       	rjmp	.+0      	; 0x74c <LCD_EnablePin+0x34>
 74c:	00 00       	nop
 74e:	08 95       	ret

00000750 <LCD_Data4bit>:
#include "I2C_LCD.h"

uint8_t I2C_LCD_Data;

void LCD_Data4bit(uint8_t data)
{
 750:	cf 93       	push	r28
 752:	c8 2f       	mov	r28, r24
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | (data & 0xf0); // 상위 4bit 출력
 754:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <I2C_LCD_Data>
 758:	8f 70       	andi	r24, 0x0F	; 15
 75a:	9c 2f       	mov	r25, r28
 75c:	90 7f       	andi	r25, 0xF0	; 240
 75e:	89 2b       	or	r24, r25
 760:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <I2C_LCD_Data>
	// 이전 상위 비트는 다 날라감 | data의 상위 비트는 살림 
	LCD_EnablePin();
 764:	d9 df       	rcall	.-78     	; 0x718 <LCD_EnablePin>
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | ((data & 0x0f)<<4); // 하위 4bit
 766:	20 e1       	ldi	r18, 0x10	; 16
 768:	c2 9f       	mul	r28, r18
 76a:	c0 01       	movw	r24, r0
 76c:	11 24       	eor	r1, r1
 76e:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <I2C_LCD_Data>
 772:	9f 70       	andi	r25, 0x0F	; 15
 774:	89 2b       	or	r24, r25
 776:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <I2C_LCD_Data>
	LCD_EnablePin();
 77a:	ce df       	rcall	.-100    	; 0x718 <LCD_EnablePin>
	// 상위 4bit 받고 -> Enable해서 출력하고 -> 하위 4bit 받고 상위로 시프트하고 -> Enabla해서 출력하고
	// [7:4] 핀만 사용해서 반반 나눠서 출력하면, 총 8bit를 출력할 수 있다.
}
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

00000780 <LCD_WriteCommand>:
	_delay_us(1600);
}

void LCD_WriteCommand(uint8_t commandData)
{
	I2C_LCD_Data &= ~(1<<LCD_RS); // Command일 때는 control register(TWCR)을 쓰고
 780:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <I2C_LCD_Data>
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 784:	9c 7f       	andi	r25, 0xFC	; 252
 786:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <I2C_LCD_Data>
	LCD_Data4bit(commandData);
 78a:	e2 cf       	rjmp	.-60     	; 0x750 <LCD_Data4bit>
 78c:	08 95       	ret

0000078e <LCD_WriteData>:
}

void LCD_WriteData(uint8_t charData)
{
	I2C_LCD_Data |= (1<<LCD_RS); // Data받을 때는 Data Register(TWDR) 쓰고
 78e:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <I2C_LCD_Data>
 792:	91 60       	ori	r25, 0x01	; 1
	I2C_LCD_Data &= ~(1<<LCD_RW); // Write 모드
 794:	9d 7f       	andi	r25, 0xFD	; 253
 796:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <I2C_LCD_Data>
	LCD_Data4bit(charData);
 79a:	da cf       	rjmp	.-76     	; 0x750 <LCD_Data4bit>
 79c:	08 95       	ret

0000079e <LCD_BackLight>:
}


void LCD_BackLight()
{
	I2C_LCD_Data |= (1<<LCD_BACKLIGHT);
 79e:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <I2C_LCD_Data>
 7a2:	68 60       	ori	r22, 0x08	; 8
 7a4:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 7a8:	8e e4       	ldi	r24, 0x4E	; 78
 7aa:	a9 cf       	rjmp	.-174    	; 0x6fe <I2C_TxByte>
 7ac:	08 95       	ret

000007ae <LCD_gotoXY>:
}

void LCD_gotoXY(uint8_t row, uint8_t col) // LCD 화면의 커서를 지정된 행(row)과 열(col) 위치로 이동시키는 함수
{
	col %= 16; // 0~15 사이의 값 지정 가능
 7ae:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2; // 0~1 사이의 값 지정 가능
 7b0:	81 70       	andi	r24, 0x01	; 1
	uint8_t address = (0x40 * row) + col; // 주어진 row와 col 값을 이용하여 LCD 화면의 주소(address, 커서 위치)룰 계산한다.
 7b2:	90 e4       	ldi	r25, 0x40	; 64
 7b4:	89 9f       	mul	r24, r25
 7b6:	60 0d       	add	r22, r0
 7b8:	11 24       	eor	r1, r1
 7ba:	86 2f       	mov	r24, r22
	// 두 번째 행(row 1)의 주소 범위는 0x40 ~ 0x4f(64~79)
	// 예시 : row 1, col 3 -> address = 0x43
	uint8_t command = 0x80 + address; // 계산된 주소를 이용하여 이동시키는 명령어 command 생성
	// 0x80을 사용하는 이유는 특정 주소값이 아닌, 첫 번째 행의 시작을 나타내는 상징적인 값으로 사용된다,
	// 이렇게 함으로써 코드의 가독성을 높이고, 행과 열 값을 쉽게 결합하여 원하는 주소 값을 계산할 수 있다.
	LCD_WriteCommand(command);
 7bc:	80 58       	subi	r24, 0x80	; 128
 7be:	e0 cf       	rjmp	.-64     	; 0x780 <LCD_WriteCommand>
 7c0:	08 95       	ret

000007c2 <LCD_WriteString>:
}

void LCD_WriteString(char *string)
{
 7c2:	0f 93       	push	r16
 7c4:	1f 93       	push	r17
 7c6:	cf 93       	push	r28
 7c8:	8c 01       	movw	r16, r24
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 7ca:	c0 e0       	ldi	r28, 0x00	; 0
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);
 7ce:	df df       	rcall	.-66     	; 0x78e <LCD_WriteData>
	LCD_WriteCommand(command);
}

void LCD_WriteString(char *string)
{
	for (uint8_t i = 0 ; string[i] ; i++) // 받은 문자열의 포인터가 보는 곳을 한 비트씩 분해해서 LCD_WriteData 함수에 하나씩 뿌려줌
 7d0:	cf 5f       	subi	r28, 0xFF	; 255
 7d2:	f8 01       	movw	r30, r16
 7d4:	ec 0f       	add	r30, r28
 7d6:	f1 1d       	adc	r31, r1
 7d8:	80 81       	ld	r24, Z
 7da:	81 11       	cpse	r24, r1
 7dc:	f8 cf       	rjmp	.-16     	; 0x7ce <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);
	}
}
 7de:	cf 91       	pop	r28
 7e0:	1f 91       	pop	r17
 7e2:	0f 91       	pop	r16
 7e4:	08 95       	ret

000007e6 <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char *string)
{
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	ea 01       	movw	r28, r20
	LCD_gotoXY(row,col); // 행과 열의 위치를 받음. -> 어디서부터 쓸 것인지를 좌표를 받음
 7ec:	e0 df       	rcall	.-64     	; 0x7ae <LCD_gotoXY>
	LCD_WriteString(string); // 문자열 입력을 받음
 7ee:	ce 01       	movw	r24, r28
 7f0:	e8 df       	rcall	.-48     	; 0x7c2 <LCD_WriteString>
}
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	08 95       	ret

000007f8 <LCD_Init>:

void LCD_Init()
{
	I2C_Init();
 7f8:	65 df       	rcall	.-310    	; 0x6c4 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7fa:	2f ef       	ldi	r18, 0xFF	; 255
 7fc:	89 ef       	ldi	r24, 0xF9	; 249
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	21 50       	subi	r18, 0x01	; 1
 802:	80 40       	sbci	r24, 0x00	; 0
 804:	90 40       	sbci	r25, 0x00	; 0
 806:	e1 f7       	brne	.-8      	; 0x800 <LCD_Init+0x8>
 808:	00 c0       	rjmp	.+0      	; 0x80a <LCD_Init+0x12>
 80a:	00 00       	nop
	
	_delay_ms(20);
	LCD_WriteCommand(0x03);
 80c:	83 e0       	ldi	r24, 0x03	; 3
 80e:	b8 df       	rcall	.-144    	; 0x780 <LCD_WriteCommand>
 810:	8f e3       	ldi	r24, 0x3F	; 63
 812:	9c e9       	ldi	r25, 0x9C	; 156
 814:	01 97       	sbiw	r24, 0x01	; 1
 816:	f1 f7       	brne	.-4      	; 0x814 <LCD_Init+0x1c>
 818:	00 c0       	rjmp	.+0      	; 0x81a <LCD_Init+0x22>
	_delay_ms(10);
	LCD_WriteCommand(0x03);
 81a:	00 00       	nop
 81c:	83 e0       	ldi	r24, 0x03	; 3
 81e:	b0 df       	rcall	.-160    	; 0x780 <LCD_WriteCommand>
 820:	8f e9       	ldi	r24, 0x9F	; 159
 822:	9f e0       	ldi	r25, 0x0F	; 15
 824:	01 97       	sbiw	r24, 0x01	; 1
 826:	f1 f7       	brne	.-4      	; 0x824 <LCD_Init+0x2c>
 828:	00 c0       	rjmp	.+0      	; 0x82a <LCD_Init+0x32>
	_delay_ms(1);
	LCD_WriteCommand(0x03);
 82a:	00 00       	nop
 82c:	83 e0       	ldi	r24, 0x03	; 3
	
	LCD_WriteCommand(0x02);
 82e:	a8 df       	rcall	.-176    	; 0x780 <LCD_WriteCommand>
 830:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 832:	a6 df       	rcall	.-180    	; 0x780 <LCD_WriteCommand>
 834:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 836:	a4 df       	rcall	.-184    	; 0x780 <LCD_WriteCommand>
 838:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 83a:	a2 df       	rcall	.-188    	; 0x780 <LCD_WriteCommand>
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	a0 df       	rcall	.-192    	; 0x780 <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 840:	86 e0       	ldi	r24, 0x06	; 6
 842:	9e df       	rcall	.-196    	; 0x780 <LCD_WriteCommand>
 844:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 846:	9c df       	rcall	.-200    	; 0x780 <LCD_WriteCommand>
 848:	aa cf       	rjmp	.-172    	; 0x79e <LCD_BackLight>
 84a:	08 95       	ret

0000084c <main>:
	//Fan_continue_run();
//}

int main(void)
{
	Fan_Init();
 84c:	b2 dc       	rcall	.-1692   	; 0x1b2 <Fan_Init>
	Fan_Start_signal();
 84e:	00 dd       	rcall	.-1536   	; 0x250 <Fan_Start_signal>
			
	while (1)
	{
		Fan_Stage();
 850:	25 dd       	rcall	.-1462   	; 0x29c <Fan_Stage>
 852:	d4 de       	rcall	.-600    	; 0x5fc <Head_spin_op>
		//Display_LCD();
		Head_spin_op();
 854:	fd cf       	rjmp	.-6      	; 0x850 <main+0x4>

00000856 <__subsf3>:
 856:	50 58       	subi	r21, 0x80	; 128

00000858 <__addsf3>:
 858:	bb 27       	eor	r27, r27
 85a:	aa 27       	eor	r26, r26
 85c:	0e d0       	rcall	.+28     	; 0x87a <__addsf3x>
 85e:	48 c1       	rjmp	.+656    	; 0xaf0 <__fp_round>
 860:	39 d1       	rcall	.+626    	; 0xad4 <__fp_pscA>
 862:	30 f0       	brcs	.+12     	; 0x870 <__addsf3+0x18>
 864:	3e d1       	rcall	.+636    	; 0xae2 <__fp_pscB>
 866:	20 f0       	brcs	.+8      	; 0x870 <__addsf3+0x18>
 868:	31 f4       	brne	.+12     	; 0x876 <__addsf3+0x1e>
 86a:	9f 3f       	cpi	r25, 0xFF	; 255
 86c:	11 f4       	brne	.+4      	; 0x872 <__addsf3+0x1a>
 86e:	1e f4       	brtc	.+6      	; 0x876 <__addsf3+0x1e>
 870:	2e c1       	rjmp	.+604    	; 0xace <__fp_nan>
 872:	0e f4       	brtc	.+2      	; 0x876 <__addsf3+0x1e>
 874:	e0 95       	com	r30
 876:	e7 fb       	bst	r30, 7
 878:	24 c1       	rjmp	.+584    	; 0xac2 <__fp_inf>

0000087a <__addsf3x>:
 87a:	e9 2f       	mov	r30, r25
 87c:	4a d1       	rcall	.+660    	; 0xb12 <__fp_split3>
 87e:	80 f3       	brcs	.-32     	; 0x860 <__addsf3+0x8>
 880:	ba 17       	cp	r27, r26
 882:	62 07       	cpc	r22, r18
 884:	73 07       	cpc	r23, r19
 886:	84 07       	cpc	r24, r20
 888:	95 07       	cpc	r25, r21
 88a:	18 f0       	brcs	.+6      	; 0x892 <__addsf3x+0x18>
 88c:	71 f4       	brne	.+28     	; 0x8aa <__addsf3x+0x30>
 88e:	9e f5       	brtc	.+102    	; 0x8f6 <__addsf3x+0x7c>
 890:	62 c1       	rjmp	.+708    	; 0xb56 <__fp_zero>
 892:	0e f4       	brtc	.+2      	; 0x896 <__addsf3x+0x1c>
 894:	e0 95       	com	r30
 896:	0b 2e       	mov	r0, r27
 898:	ba 2f       	mov	r27, r26
 89a:	a0 2d       	mov	r26, r0
 89c:	0b 01       	movw	r0, r22
 89e:	b9 01       	movw	r22, r18
 8a0:	90 01       	movw	r18, r0
 8a2:	0c 01       	movw	r0, r24
 8a4:	ca 01       	movw	r24, r20
 8a6:	a0 01       	movw	r20, r0
 8a8:	11 24       	eor	r1, r1
 8aa:	ff 27       	eor	r31, r31
 8ac:	59 1b       	sub	r21, r25
 8ae:	99 f0       	breq	.+38     	; 0x8d6 <__addsf3x+0x5c>
 8b0:	59 3f       	cpi	r21, 0xF9	; 249
 8b2:	50 f4       	brcc	.+20     	; 0x8c8 <__addsf3x+0x4e>
 8b4:	50 3e       	cpi	r21, 0xE0	; 224
 8b6:	68 f1       	brcs	.+90     	; 0x912 <__addsf3x+0x98>
 8b8:	1a 16       	cp	r1, r26
 8ba:	f0 40       	sbci	r31, 0x00	; 0
 8bc:	a2 2f       	mov	r26, r18
 8be:	23 2f       	mov	r18, r19
 8c0:	34 2f       	mov	r19, r20
 8c2:	44 27       	eor	r20, r20
 8c4:	58 5f       	subi	r21, 0xF8	; 248
 8c6:	f3 cf       	rjmp	.-26     	; 0x8ae <__addsf3x+0x34>
 8c8:	46 95       	lsr	r20
 8ca:	37 95       	ror	r19
 8cc:	27 95       	ror	r18
 8ce:	a7 95       	ror	r26
 8d0:	f0 40       	sbci	r31, 0x00	; 0
 8d2:	53 95       	inc	r21
 8d4:	c9 f7       	brne	.-14     	; 0x8c8 <__addsf3x+0x4e>
 8d6:	7e f4       	brtc	.+30     	; 0x8f6 <__addsf3x+0x7c>
 8d8:	1f 16       	cp	r1, r31
 8da:	ba 0b       	sbc	r27, r26
 8dc:	62 0b       	sbc	r22, r18
 8de:	73 0b       	sbc	r23, r19
 8e0:	84 0b       	sbc	r24, r20
 8e2:	ba f0       	brmi	.+46     	; 0x912 <__addsf3x+0x98>
 8e4:	91 50       	subi	r25, 0x01	; 1
 8e6:	a1 f0       	breq	.+40     	; 0x910 <__addsf3x+0x96>
 8e8:	ff 0f       	add	r31, r31
 8ea:	bb 1f       	adc	r27, r27
 8ec:	66 1f       	adc	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	c2 f7       	brpl	.-16     	; 0x8e4 <__addsf3x+0x6a>
 8f4:	0e c0       	rjmp	.+28     	; 0x912 <__addsf3x+0x98>
 8f6:	ba 0f       	add	r27, r26
 8f8:	62 1f       	adc	r22, r18
 8fa:	73 1f       	adc	r23, r19
 8fc:	84 1f       	adc	r24, r20
 8fe:	48 f4       	brcc	.+18     	; 0x912 <__addsf3x+0x98>
 900:	87 95       	ror	r24
 902:	77 95       	ror	r23
 904:	67 95       	ror	r22
 906:	b7 95       	ror	r27
 908:	f7 95       	ror	r31
 90a:	9e 3f       	cpi	r25, 0xFE	; 254
 90c:	08 f0       	brcs	.+2      	; 0x910 <__addsf3x+0x96>
 90e:	b3 cf       	rjmp	.-154    	; 0x876 <__addsf3+0x1e>
 910:	93 95       	inc	r25
 912:	88 0f       	add	r24, r24
 914:	08 f0       	brcs	.+2      	; 0x918 <__addsf3x+0x9e>
 916:	99 27       	eor	r25, r25
 918:	ee 0f       	add	r30, r30
 91a:	97 95       	ror	r25
 91c:	87 95       	ror	r24
 91e:	08 95       	ret

00000920 <__divsf3>:
 920:	0c d0       	rcall	.+24     	; 0x93a <__divsf3x>
 922:	e6 c0       	rjmp	.+460    	; 0xaf0 <__fp_round>
 924:	de d0       	rcall	.+444    	; 0xae2 <__fp_pscB>
 926:	40 f0       	brcs	.+16     	; 0x938 <__divsf3+0x18>
 928:	d5 d0       	rcall	.+426    	; 0xad4 <__fp_pscA>
 92a:	30 f0       	brcs	.+12     	; 0x938 <__divsf3+0x18>
 92c:	21 f4       	brne	.+8      	; 0x936 <__divsf3+0x16>
 92e:	5f 3f       	cpi	r21, 0xFF	; 255
 930:	19 f0       	breq	.+6      	; 0x938 <__divsf3+0x18>
 932:	c7 c0       	rjmp	.+398    	; 0xac2 <__fp_inf>
 934:	51 11       	cpse	r21, r1
 936:	10 c1       	rjmp	.+544    	; 0xb58 <__fp_szero>
 938:	ca c0       	rjmp	.+404    	; 0xace <__fp_nan>

0000093a <__divsf3x>:
 93a:	eb d0       	rcall	.+470    	; 0xb12 <__fp_split3>
 93c:	98 f3       	brcs	.-26     	; 0x924 <__divsf3+0x4>

0000093e <__divsf3_pse>:
 93e:	99 23       	and	r25, r25
 940:	c9 f3       	breq	.-14     	; 0x934 <__divsf3+0x14>
 942:	55 23       	and	r21, r21
 944:	b1 f3       	breq	.-20     	; 0x932 <__divsf3+0x12>
 946:	95 1b       	sub	r25, r21
 948:	55 0b       	sbc	r21, r21
 94a:	bb 27       	eor	r27, r27
 94c:	aa 27       	eor	r26, r26
 94e:	62 17       	cp	r22, r18
 950:	73 07       	cpc	r23, r19
 952:	84 07       	cpc	r24, r20
 954:	38 f0       	brcs	.+14     	; 0x964 <__divsf3_pse+0x26>
 956:	9f 5f       	subi	r25, 0xFF	; 255
 958:	5f 4f       	sbci	r21, 0xFF	; 255
 95a:	22 0f       	add	r18, r18
 95c:	33 1f       	adc	r19, r19
 95e:	44 1f       	adc	r20, r20
 960:	aa 1f       	adc	r26, r26
 962:	a9 f3       	breq	.-22     	; 0x94e <__divsf3_pse+0x10>
 964:	33 d0       	rcall	.+102    	; 0x9cc <__divsf3_pse+0x8e>
 966:	0e 2e       	mov	r0, r30
 968:	3a f0       	brmi	.+14     	; 0x978 <__divsf3_pse+0x3a>
 96a:	e0 e8       	ldi	r30, 0x80	; 128
 96c:	30 d0       	rcall	.+96     	; 0x9ce <__divsf3_pse+0x90>
 96e:	91 50       	subi	r25, 0x01	; 1
 970:	50 40       	sbci	r21, 0x00	; 0
 972:	e6 95       	lsr	r30
 974:	00 1c       	adc	r0, r0
 976:	ca f7       	brpl	.-14     	; 0x96a <__divsf3_pse+0x2c>
 978:	29 d0       	rcall	.+82     	; 0x9cc <__divsf3_pse+0x8e>
 97a:	fe 2f       	mov	r31, r30
 97c:	27 d0       	rcall	.+78     	; 0x9cc <__divsf3_pse+0x8e>
 97e:	66 0f       	add	r22, r22
 980:	77 1f       	adc	r23, r23
 982:	88 1f       	adc	r24, r24
 984:	bb 1f       	adc	r27, r27
 986:	26 17       	cp	r18, r22
 988:	37 07       	cpc	r19, r23
 98a:	48 07       	cpc	r20, r24
 98c:	ab 07       	cpc	r26, r27
 98e:	b0 e8       	ldi	r27, 0x80	; 128
 990:	09 f0       	breq	.+2      	; 0x994 <__divsf3_pse+0x56>
 992:	bb 0b       	sbc	r27, r27
 994:	80 2d       	mov	r24, r0
 996:	bf 01       	movw	r22, r30
 998:	ff 27       	eor	r31, r31
 99a:	93 58       	subi	r25, 0x83	; 131
 99c:	5f 4f       	sbci	r21, 0xFF	; 255
 99e:	2a f0       	brmi	.+10     	; 0x9aa <__divsf3_pse+0x6c>
 9a0:	9e 3f       	cpi	r25, 0xFE	; 254
 9a2:	51 05       	cpc	r21, r1
 9a4:	68 f0       	brcs	.+26     	; 0x9c0 <__divsf3_pse+0x82>
 9a6:	8d c0       	rjmp	.+282    	; 0xac2 <__fp_inf>
 9a8:	d7 c0       	rjmp	.+430    	; 0xb58 <__fp_szero>
 9aa:	5f 3f       	cpi	r21, 0xFF	; 255
 9ac:	ec f3       	brlt	.-6      	; 0x9a8 <__divsf3_pse+0x6a>
 9ae:	98 3e       	cpi	r25, 0xE8	; 232
 9b0:	dc f3       	brlt	.-10     	; 0x9a8 <__divsf3_pse+0x6a>
 9b2:	86 95       	lsr	r24
 9b4:	77 95       	ror	r23
 9b6:	67 95       	ror	r22
 9b8:	b7 95       	ror	r27
 9ba:	f7 95       	ror	r31
 9bc:	9f 5f       	subi	r25, 0xFF	; 255
 9be:	c9 f7       	brne	.-14     	; 0x9b2 <__divsf3_pse+0x74>
 9c0:	88 0f       	add	r24, r24
 9c2:	91 1d       	adc	r25, r1
 9c4:	96 95       	lsr	r25
 9c6:	87 95       	ror	r24
 9c8:	97 f9       	bld	r25, 7
 9ca:	08 95       	ret
 9cc:	e1 e0       	ldi	r30, 0x01	; 1
 9ce:	66 0f       	add	r22, r22
 9d0:	77 1f       	adc	r23, r23
 9d2:	88 1f       	adc	r24, r24
 9d4:	bb 1f       	adc	r27, r27
 9d6:	62 17       	cp	r22, r18
 9d8:	73 07       	cpc	r23, r19
 9da:	84 07       	cpc	r24, r20
 9dc:	ba 07       	cpc	r27, r26
 9de:	20 f0       	brcs	.+8      	; 0x9e8 <__divsf3_pse+0xaa>
 9e0:	62 1b       	sub	r22, r18
 9e2:	73 0b       	sbc	r23, r19
 9e4:	84 0b       	sbc	r24, r20
 9e6:	ba 0b       	sbc	r27, r26
 9e8:	ee 1f       	adc	r30, r30
 9ea:	88 f7       	brcc	.-30     	; 0x9ce <__divsf3_pse+0x90>
 9ec:	e0 95       	com	r30
 9ee:	08 95       	ret

000009f0 <__fixunssfsi>:
 9f0:	98 d0       	rcall	.+304    	; 0xb22 <__fp_splitA>
 9f2:	88 f0       	brcs	.+34     	; 0xa16 <__fixunssfsi+0x26>
 9f4:	9f 57       	subi	r25, 0x7F	; 127
 9f6:	90 f0       	brcs	.+36     	; 0xa1c <__fixunssfsi+0x2c>
 9f8:	b9 2f       	mov	r27, r25
 9fa:	99 27       	eor	r25, r25
 9fc:	b7 51       	subi	r27, 0x17	; 23
 9fe:	a0 f0       	brcs	.+40     	; 0xa28 <__fixunssfsi+0x38>
 a00:	d1 f0       	breq	.+52     	; 0xa36 <__fixunssfsi+0x46>
 a02:	66 0f       	add	r22, r22
 a04:	77 1f       	adc	r23, r23
 a06:	88 1f       	adc	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	1a f0       	brmi	.+6      	; 0xa12 <__fixunssfsi+0x22>
 a0c:	ba 95       	dec	r27
 a0e:	c9 f7       	brne	.-14     	; 0xa02 <__fixunssfsi+0x12>
 a10:	12 c0       	rjmp	.+36     	; 0xa36 <__fixunssfsi+0x46>
 a12:	b1 30       	cpi	r27, 0x01	; 1
 a14:	81 f0       	breq	.+32     	; 0xa36 <__fixunssfsi+0x46>
 a16:	9f d0       	rcall	.+318    	; 0xb56 <__fp_zero>
 a18:	b1 e0       	ldi	r27, 0x01	; 1
 a1a:	08 95       	ret
 a1c:	9c c0       	rjmp	.+312    	; 0xb56 <__fp_zero>
 a1e:	67 2f       	mov	r22, r23
 a20:	78 2f       	mov	r23, r24
 a22:	88 27       	eor	r24, r24
 a24:	b8 5f       	subi	r27, 0xF8	; 248
 a26:	39 f0       	breq	.+14     	; 0xa36 <__fixunssfsi+0x46>
 a28:	b9 3f       	cpi	r27, 0xF9	; 249
 a2a:	cc f3       	brlt	.-14     	; 0xa1e <__fixunssfsi+0x2e>
 a2c:	86 95       	lsr	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	b3 95       	inc	r27
 a34:	d9 f7       	brne	.-10     	; 0xa2c <__fixunssfsi+0x3c>
 a36:	3e f4       	brtc	.+14     	; 0xa46 <__fixunssfsi+0x56>
 a38:	90 95       	com	r25
 a3a:	80 95       	com	r24
 a3c:	70 95       	com	r23
 a3e:	61 95       	neg	r22
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	08 95       	ret

00000a48 <__floatunsisf>:
 a48:	e8 94       	clt
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <__floatsisf+0x12>

00000a4c <__floatsisf>:
 a4c:	97 fb       	bst	r25, 7
 a4e:	3e f4       	brtc	.+14     	; 0xa5e <__floatsisf+0x12>
 a50:	90 95       	com	r25
 a52:	80 95       	com	r24
 a54:	70 95       	com	r23
 a56:	61 95       	neg	r22
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	99 23       	and	r25, r25
 a60:	a9 f0       	breq	.+42     	; 0xa8c <__floatsisf+0x40>
 a62:	f9 2f       	mov	r31, r25
 a64:	96 e9       	ldi	r25, 0x96	; 150
 a66:	bb 27       	eor	r27, r27
 a68:	93 95       	inc	r25
 a6a:	f6 95       	lsr	r31
 a6c:	87 95       	ror	r24
 a6e:	77 95       	ror	r23
 a70:	67 95       	ror	r22
 a72:	b7 95       	ror	r27
 a74:	f1 11       	cpse	r31, r1
 a76:	f8 cf       	rjmp	.-16     	; 0xa68 <__floatsisf+0x1c>
 a78:	fa f4       	brpl	.+62     	; 0xab8 <__floatsisf+0x6c>
 a7a:	bb 0f       	add	r27, r27
 a7c:	11 f4       	brne	.+4      	; 0xa82 <__floatsisf+0x36>
 a7e:	60 ff       	sbrs	r22, 0
 a80:	1b c0       	rjmp	.+54     	; 0xab8 <__floatsisf+0x6c>
 a82:	6f 5f       	subi	r22, 0xFF	; 255
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	16 c0       	rjmp	.+44     	; 0xab8 <__floatsisf+0x6c>
 a8c:	88 23       	and	r24, r24
 a8e:	11 f0       	breq	.+4      	; 0xa94 <__floatsisf+0x48>
 a90:	96 e9       	ldi	r25, 0x96	; 150
 a92:	11 c0       	rjmp	.+34     	; 0xab6 <__floatsisf+0x6a>
 a94:	77 23       	and	r23, r23
 a96:	21 f0       	breq	.+8      	; 0xaa0 <__floatsisf+0x54>
 a98:	9e e8       	ldi	r25, 0x8E	; 142
 a9a:	87 2f       	mov	r24, r23
 a9c:	76 2f       	mov	r23, r22
 a9e:	05 c0       	rjmp	.+10     	; 0xaaa <__floatsisf+0x5e>
 aa0:	66 23       	and	r22, r22
 aa2:	71 f0       	breq	.+28     	; 0xac0 <__floatsisf+0x74>
 aa4:	96 e8       	ldi	r25, 0x86	; 134
 aa6:	86 2f       	mov	r24, r22
 aa8:	70 e0       	ldi	r23, 0x00	; 0
 aaa:	60 e0       	ldi	r22, 0x00	; 0
 aac:	2a f0       	brmi	.+10     	; 0xab8 <__floatsisf+0x6c>
 aae:	9a 95       	dec	r25
 ab0:	66 0f       	add	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	da f7       	brpl	.-10     	; 0xaae <__floatsisf+0x62>
 ab8:	88 0f       	add	r24, r24
 aba:	96 95       	lsr	r25
 abc:	87 95       	ror	r24
 abe:	97 f9       	bld	r25, 7
 ac0:	08 95       	ret

00000ac2 <__fp_inf>:
 ac2:	97 f9       	bld	r25, 7
 ac4:	9f 67       	ori	r25, 0x7F	; 127
 ac6:	80 e8       	ldi	r24, 0x80	; 128
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	60 e0       	ldi	r22, 0x00	; 0
 acc:	08 95       	ret

00000ace <__fp_nan>:
 ace:	9f ef       	ldi	r25, 0xFF	; 255
 ad0:	80 ec       	ldi	r24, 0xC0	; 192
 ad2:	08 95       	ret

00000ad4 <__fp_pscA>:
 ad4:	00 24       	eor	r0, r0
 ad6:	0a 94       	dec	r0
 ad8:	16 16       	cp	r1, r22
 ada:	17 06       	cpc	r1, r23
 adc:	18 06       	cpc	r1, r24
 ade:	09 06       	cpc	r0, r25
 ae0:	08 95       	ret

00000ae2 <__fp_pscB>:
 ae2:	00 24       	eor	r0, r0
 ae4:	0a 94       	dec	r0
 ae6:	12 16       	cp	r1, r18
 ae8:	13 06       	cpc	r1, r19
 aea:	14 06       	cpc	r1, r20
 aec:	05 06       	cpc	r0, r21
 aee:	08 95       	ret

00000af0 <__fp_round>:
 af0:	09 2e       	mov	r0, r25
 af2:	03 94       	inc	r0
 af4:	00 0c       	add	r0, r0
 af6:	11 f4       	brne	.+4      	; 0xafc <__fp_round+0xc>
 af8:	88 23       	and	r24, r24
 afa:	52 f0       	brmi	.+20     	; 0xb10 <__fp_round+0x20>
 afc:	bb 0f       	add	r27, r27
 afe:	40 f4       	brcc	.+16     	; 0xb10 <__fp_round+0x20>
 b00:	bf 2b       	or	r27, r31
 b02:	11 f4       	brne	.+4      	; 0xb08 <__fp_round+0x18>
 b04:	60 ff       	sbrs	r22, 0
 b06:	04 c0       	rjmp	.+8      	; 0xb10 <__fp_round+0x20>
 b08:	6f 5f       	subi	r22, 0xFF	; 255
 b0a:	7f 4f       	sbci	r23, 0xFF	; 255
 b0c:	8f 4f       	sbci	r24, 0xFF	; 255
 b0e:	9f 4f       	sbci	r25, 0xFF	; 255
 b10:	08 95       	ret

00000b12 <__fp_split3>:
 b12:	57 fd       	sbrc	r21, 7
 b14:	90 58       	subi	r25, 0x80	; 128
 b16:	44 0f       	add	r20, r20
 b18:	55 1f       	adc	r21, r21
 b1a:	59 f0       	breq	.+22     	; 0xb32 <__fp_splitA+0x10>
 b1c:	5f 3f       	cpi	r21, 0xFF	; 255
 b1e:	71 f0       	breq	.+28     	; 0xb3c <__fp_splitA+0x1a>
 b20:	47 95       	ror	r20

00000b22 <__fp_splitA>:
 b22:	88 0f       	add	r24, r24
 b24:	97 fb       	bst	r25, 7
 b26:	99 1f       	adc	r25, r25
 b28:	61 f0       	breq	.+24     	; 0xb42 <__fp_splitA+0x20>
 b2a:	9f 3f       	cpi	r25, 0xFF	; 255
 b2c:	79 f0       	breq	.+30     	; 0xb4c <__fp_splitA+0x2a>
 b2e:	87 95       	ror	r24
 b30:	08 95       	ret
 b32:	12 16       	cp	r1, r18
 b34:	13 06       	cpc	r1, r19
 b36:	14 06       	cpc	r1, r20
 b38:	55 1f       	adc	r21, r21
 b3a:	f2 cf       	rjmp	.-28     	; 0xb20 <__fp_split3+0xe>
 b3c:	46 95       	lsr	r20
 b3e:	f1 df       	rcall	.-30     	; 0xb22 <__fp_splitA>
 b40:	08 c0       	rjmp	.+16     	; 0xb52 <__fp_splitA+0x30>
 b42:	16 16       	cp	r1, r22
 b44:	17 06       	cpc	r1, r23
 b46:	18 06       	cpc	r1, r24
 b48:	99 1f       	adc	r25, r25
 b4a:	f1 cf       	rjmp	.-30     	; 0xb2e <__fp_splitA+0xc>
 b4c:	86 95       	lsr	r24
 b4e:	71 05       	cpc	r23, r1
 b50:	61 05       	cpc	r22, r1
 b52:	08 94       	sec
 b54:	08 95       	ret

00000b56 <__fp_zero>:
 b56:	e8 94       	clt

00000b58 <__fp_szero>:
 b58:	bb 27       	eor	r27, r27
 b5a:	66 27       	eor	r22, r22
 b5c:	77 27       	eor	r23, r23
 b5e:	cb 01       	movw	r24, r22
 b60:	97 f9       	bld	r25, 7
 b62:	08 95       	ret

00000b64 <__mulsf3>:
 b64:	0b d0       	rcall	.+22     	; 0xb7c <__mulsf3x>
 b66:	c4 cf       	rjmp	.-120    	; 0xaf0 <__fp_round>
 b68:	b5 df       	rcall	.-150    	; 0xad4 <__fp_pscA>
 b6a:	28 f0       	brcs	.+10     	; 0xb76 <__mulsf3+0x12>
 b6c:	ba df       	rcall	.-140    	; 0xae2 <__fp_pscB>
 b6e:	18 f0       	brcs	.+6      	; 0xb76 <__mulsf3+0x12>
 b70:	95 23       	and	r25, r21
 b72:	09 f0       	breq	.+2      	; 0xb76 <__mulsf3+0x12>
 b74:	a6 cf       	rjmp	.-180    	; 0xac2 <__fp_inf>
 b76:	ab cf       	rjmp	.-170    	; 0xace <__fp_nan>
 b78:	11 24       	eor	r1, r1
 b7a:	ee cf       	rjmp	.-36     	; 0xb58 <__fp_szero>

00000b7c <__mulsf3x>:
 b7c:	ca df       	rcall	.-108    	; 0xb12 <__fp_split3>
 b7e:	a0 f3       	brcs	.-24     	; 0xb68 <__mulsf3+0x4>

00000b80 <__mulsf3_pse>:
 b80:	95 9f       	mul	r25, r21
 b82:	d1 f3       	breq	.-12     	; 0xb78 <__mulsf3+0x14>
 b84:	95 0f       	add	r25, r21
 b86:	50 e0       	ldi	r21, 0x00	; 0
 b88:	55 1f       	adc	r21, r21
 b8a:	62 9f       	mul	r22, r18
 b8c:	f0 01       	movw	r30, r0
 b8e:	72 9f       	mul	r23, r18
 b90:	bb 27       	eor	r27, r27
 b92:	f0 0d       	add	r31, r0
 b94:	b1 1d       	adc	r27, r1
 b96:	63 9f       	mul	r22, r19
 b98:	aa 27       	eor	r26, r26
 b9a:	f0 0d       	add	r31, r0
 b9c:	b1 1d       	adc	r27, r1
 b9e:	aa 1f       	adc	r26, r26
 ba0:	64 9f       	mul	r22, r20
 ba2:	66 27       	eor	r22, r22
 ba4:	b0 0d       	add	r27, r0
 ba6:	a1 1d       	adc	r26, r1
 ba8:	66 1f       	adc	r22, r22
 baa:	82 9f       	mul	r24, r18
 bac:	22 27       	eor	r18, r18
 bae:	b0 0d       	add	r27, r0
 bb0:	a1 1d       	adc	r26, r1
 bb2:	62 1f       	adc	r22, r18
 bb4:	73 9f       	mul	r23, r19
 bb6:	b0 0d       	add	r27, r0
 bb8:	a1 1d       	adc	r26, r1
 bba:	62 1f       	adc	r22, r18
 bbc:	83 9f       	mul	r24, r19
 bbe:	a0 0d       	add	r26, r0
 bc0:	61 1d       	adc	r22, r1
 bc2:	22 1f       	adc	r18, r18
 bc4:	74 9f       	mul	r23, r20
 bc6:	33 27       	eor	r19, r19
 bc8:	a0 0d       	add	r26, r0
 bca:	61 1d       	adc	r22, r1
 bcc:	23 1f       	adc	r18, r19
 bce:	84 9f       	mul	r24, r20
 bd0:	60 0d       	add	r22, r0
 bd2:	21 1d       	adc	r18, r1
 bd4:	82 2f       	mov	r24, r18
 bd6:	76 2f       	mov	r23, r22
 bd8:	6a 2f       	mov	r22, r26
 bda:	11 24       	eor	r1, r1
 bdc:	9f 57       	subi	r25, 0x7F	; 127
 bde:	50 40       	sbci	r21, 0x00	; 0
 be0:	8a f0       	brmi	.+34     	; 0xc04 <__mulsf3_pse+0x84>
 be2:	e1 f0       	breq	.+56     	; 0xc1c <__mulsf3_pse+0x9c>
 be4:	88 23       	and	r24, r24
 be6:	4a f0       	brmi	.+18     	; 0xbfa <__mulsf3_pse+0x7a>
 be8:	ee 0f       	add	r30, r30
 bea:	ff 1f       	adc	r31, r31
 bec:	bb 1f       	adc	r27, r27
 bee:	66 1f       	adc	r22, r22
 bf0:	77 1f       	adc	r23, r23
 bf2:	88 1f       	adc	r24, r24
 bf4:	91 50       	subi	r25, 0x01	; 1
 bf6:	50 40       	sbci	r21, 0x00	; 0
 bf8:	a9 f7       	brne	.-22     	; 0xbe4 <__mulsf3_pse+0x64>
 bfa:	9e 3f       	cpi	r25, 0xFE	; 254
 bfc:	51 05       	cpc	r21, r1
 bfe:	70 f0       	brcs	.+28     	; 0xc1c <__mulsf3_pse+0x9c>
 c00:	60 cf       	rjmp	.-320    	; 0xac2 <__fp_inf>
 c02:	aa cf       	rjmp	.-172    	; 0xb58 <__fp_szero>
 c04:	5f 3f       	cpi	r21, 0xFF	; 255
 c06:	ec f3       	brlt	.-6      	; 0xc02 <__mulsf3_pse+0x82>
 c08:	98 3e       	cpi	r25, 0xE8	; 232
 c0a:	dc f3       	brlt	.-10     	; 0xc02 <__mulsf3_pse+0x82>
 c0c:	86 95       	lsr	r24
 c0e:	77 95       	ror	r23
 c10:	67 95       	ror	r22
 c12:	b7 95       	ror	r27
 c14:	f7 95       	ror	r31
 c16:	e7 95       	ror	r30
 c18:	9f 5f       	subi	r25, 0xFF	; 255
 c1a:	c1 f7       	brne	.-16     	; 0xc0c <__mulsf3_pse+0x8c>
 c1c:	fe 2b       	or	r31, r30
 c1e:	88 0f       	add	r24, r24
 c20:	91 1d       	adc	r25, r1
 c22:	96 95       	lsr	r25
 c24:	87 95       	ror	r24
 c26:	97 f9       	bld	r25, 7
 c28:	08 95       	ret

00000c2a <_exit>:
 c2a:	f8 94       	cli

00000c2c <__stop_program>:
 c2c:	ff cf       	rjmp	.-2      	; 0xc2c <__stop_program>
